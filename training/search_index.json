[["index.html", "NCEAS Data Team Training Welcome to NCEAS! First day to-dos Account information NCEAS events NCEAS Community Meetings/ Groups Code of Conduct Citation Information", " NCEAS Data Team Training Jesse Goldstein, Dominic Mullen, Jeanette Clark, Irene Steves, Mitchell Maier, Bryce Mecum, Peter Slaughter, Emily O’Dean, Jasmine Lai 2021-05-04 Welcome to NCEAS! First day to-dos Get a tour of the office from Ginger Fill out required paperwork from Ana (room 309) Have Gabriella take your picture (room 309) Set up the remainder of your accounts Account information LDAP - this should be set up prior to your start date in order to help get other accounts set. This account and password control your access to: arcticdata RT queue GitHub Enterprise - arctic-data Datateam server - follow instructions in email from Nick at NCEAS to reset your datateam password in the terminal ORCiD - create an account Login to test.arcticdata.io with your ORCID iD NCEAS Slack - get an invite from slack.nceas.ucsb.edu Channels to join: #arctica, #arcticbot, #computing, #datateam, #devteam, #social Introduce yourself in #datateam and then use that channel to ask Jeanette to make you an administrator on test.arcticdata.io Arctic Data Center Team - after creation of ORCiD and sign-in to both arcticdata.io and test.arcticdata.io, request addition to the admin group from Jeanette in Slack GitHub - if you do not have a public GitHub account already, please register for one here If you are an intern, fill out anticipated quarterly schedule on the intern google calendar shared with you. Electronic Timekeeping - make sure you can log on to electronic timekeeping via your UCSBNetID and password (may not be accessible on the first day, if you continue to have issues please let Ana know). If you are an hourly employee, log your hours for your first day! Under today’s date select ‘Hours Worked’ under the Pay Code column, enter the amount of hours under the Amount column, and finally click the ‘Save’ button in the top right. At the end of every two-week pay period you will also need to click the ‘Approve Timecard’ button in order to submit your timecard. Detailed Instructions Let Jeanette or Jasmine know what email you would like to use for general NCEAS updates from all@nceas.ucsb.edu NCEAS events NCEAS hosts a number of events that you are encouraged to attend. Keep an eye on your email but the recurring events are: Roundtable weekly presentation and discussion of research by a visiting or local scientist Wednesdays at 12:15 in the lounge Coffee Klatch coffee, socializing, and news updates for NCEAS Tuesdays at 10:30 in the lounge Salad Potluck potluck salad and socializing, bring a topping or side to share! second Tuesday of the month, 12:15 in the lounge NCEAS Community Meetings/ Groups Check out their inidividual calendar entries and channels for more information Early Career Researcher Community Forum - #ecr_community Hacky Hours - #hackyhour NCEAS Diversity Team NCEAS Book Club - #bookclub Code of Conduct Take a moment to review the diversity and inclusion page and code of conduct at NCEAS so that we can foster an environment that is safe, welcoming and inclusive for everyone. Citation Information This work is licensed under a Creative Commons Attribution 4.0 International License. Clark, Jeanette, Jesse Goldstein, Dominic Mullen, Irene Steves, Mitchell Maier, Stephanie Freund, Sharis Ochs, Bryce Mecum, Peter Slaughter, Emily O’Dean, Jasmine Lai. 2019 Training Materials for the Arctic Data Center Curation Team. Arctic Data Center. doi:10.18739/A20G3GX8W. "],["introduction-to-open-science.html", "Chapter 1 Introduction to open science 1.1 Background reading 1.2 Effective data management 1.3 Using DataONE 1.4 Working on a remote server 1.5 Cyberduck instructions 1.6 A note on paths 1.7 A note on R 1.8 A note on effective troubleshooting in R 1.9 A note on Exercises 1.10 Exercise 1", " Chapter 1 Introduction to open science These materials are meant to introduce you to the principles of open science, effective data management, and data archival with the DataONE data repository. It also provides an overview on the tools we will be using (remote servers, Rstudio, R, Troubleshooting, Exercises) throughout the training. This document is meant to take multiple days to complete depending on your previous knowledge on some of the topics. If you see anything that needs fixing, submit a issue in the github issues 1.1 Background reading Read the content on the Arctic Data Center (ADC) webpage to learn more about data submission, preservation, and the history of the ADC. We encourage you to follow the links within these pages to gain a deeper understanding. about submission preservation history 1.2 Effective data management Read Matt Jones et al.’s paper on effective data management to learn how we will be organizing datasets prior to archival. (Please note that while the tips outlined in this article are best practices, we often do not reformat data files submitted to our repositories unless necessary. It is best to be conservative and not alter other people’s data without good reason.) You may also want to explore the DataONE education resources related to data management. 1.3 Using DataONE Data Observation Network for Earth (DataONE) is a community driven initiative that provides access to data across multiple member repositories, supporting enhanced search and discovery of Earth and environmental data. Read more about what DataONE is here and about DataONE member node (MN) guidelines here. Please feel free to ask Jeanette any questions you have about DataONE. We will be applying these concepts in the next chapter. 1.4 Working on a remote server All of the work that we do at NCEAS is done on our remote server, datateam.nceas.ucsb.edu. If you have never worked on a remote server before, you can think of it like working on a different computer via the internet. We access RStudio on our server through this link. This is the same as your desktop version of RStudio with one main difference is that files are on the server. Please do all your work here. This way you can share your code with the rest of us. If you R session is frozen and unresponsive check out the guide on how to fix it. To transfer files on and off of the server we often use a secure FTP (sFTP) client, Cyberduck. This will be used when researchers have many files to upload or size of the files are very large. 1.5 Cyberduck instructions To use Cyberduck to transfer local files onto the Datateam server: Open Cyberduck. Check that you have the latest version (Cyberduck -&gt; Check for Update…). If not, download and install the latest (you may need Dom, Jesse, or Jeanette to enter a password). Click “Open Connection”. From the drop-down, choose “SFTP (Secure File Transfer Protocol)”. Enter “datateam.nceas.ucsb.edu” for Server. Enter your username and password. Connect. From here, you can drag and drop files to and from the server. 1.6 A note on paths On the servers, paths to files in your folder always start with /home/yourusername/.... Note - if you are a more advanced user, you may use the method you prefer as long as it is evident where your file is from. When you write scripts, try to avoid writing relative paths (which rely on what you have set your working directory to) as much as possible. Instead, write out the entire path as shown above, so that if another data team member needs to run your script, it is not dependent on a working directory. 1.7 A note on R This training assumes basic knowledge of R and RStudio. If you want a quick R refresher, walk through Jenny Bryan’s excellent materials here. Throughout this training we will occasionally use the namespace syntax package_name::function_name() when writing a function. This syntax denotes which package a function came from. For example dataone::getSystemMetadata selects the getSystemMetadata function from the dataone R package. More detailed information on namespaces can be found here. 1.8 A note on effective troubleshooting in R We suggest using a combination of minimal reproducible examples (MRE) and the package reprex to create reproducible examples. This will allow others to better help you if we can run the code on our own computers. A MRE is stripping down your code to only the parts that cause the bug. How to generate a reprex: copy the code you want to ask about call reprex() fix until everything runs smoothly copy the result to ask your question When copy and paste code slack message or github issues, use three backticks for code blocks and two backticks for a small piece of code will prevent issues with slack formats quotation. For more information and examples check out more of Jenny Bryan’s slides or watch the video starting at about the 10 min mark. Note for EML related MREs: - Generating a reprex for these situations (ie. tokens) might be complicated but you can should still follow the MRE principles even if the reprex won’t render fully - You can include a minimal EML to avoid some get_package issues: me &lt;- list(individualName = list(givenName = &quot;Jeanette&quot;, surName = &quot;Clark&quot;)) attributes &lt;- data.frame(attributeName = &#39;length_1&#39;, attributeDefinition = &#39;def1&#39;, measurementScale = &#39;ratio&#39;, domain = &#39;numericDomain&#39;, unit = &#39;meter&#39;, numberType = &#39;real&#39;) att_list &lt;- set_attributes(attributes) doc_ex &lt;- list(packageId = &quot;id&quot;, system = &quot;system&quot;, dataset = list(title = &quot;A Mimimal Valid EML Dataset&quot;, creator = me, contact = me, dataTable = list(entityName = &quot;data table&quot;, attributeList = att_list)) ) 1.9 A note on Exercises The rest of the training has a series of exercises. These are meant to take you through the process as someone submitting a dataset from scratch. This is slightly different than the usual workflow but important in understanding the underlying system behind the Arctic Data Center. Please note that you will be completing everything on the site for the training. In the future if you are unsure about doing anything with a dataset. The test site is a good place to try things out! 1.10 Exercise 1 This part of the exercise walks you through submitting data through the web form on “test.arcticdata.io” 1.10.1 Part 1 Download the csv of Table 1 from this paper. Reformat the table to meet the guidelines outlined in the journal article on effective data management (this might be easier to do in an interactive environment like Excel). Note - we usually don’t edit the content in data submissions so don’t stress over this part too much 1.10.2 Part 2 Go to “test.arcticdata.io” and submit your reformatted file with appropriate metadata that you derive from the text of the paper: list yourself as the first ‘Creator’ so your test submission can easily be found, for the purposes of this training exercise, not every single author needs to be listed with full contact details, listing the first two authors is fine, directly copying and pasting sections from the paper (abstract, methods, etc.) is also fine, attributes (column names) should be defined, including correct units and missing value codes. submit the dataset "],["creating-a-data-package.html", "Chapter 2 Creating a data package 2.1 What is in a package? 2.2 Packages on the Website 2.3 About identifiers 2.4 Upload a package 2.5 Publish an object 2.6 Create a resource map 2.7 Exercise 2", " Chapter 2 Creating a data package This chapter will teach you how to create and submit a data package to a DataONE MN via R. But first, please read this paper on the value of structured metadata, namely the Ecological Metadata Language (EML). 2.1 What is in a package? A data package generally consists of at least 3 components. Metadata: One object is the metadata file itself. In case you are unfamiliar with metadata, metadata are information that describe data (e.g. who made the data, how were the data made, etc.). The metadata file will be in an XML format, and have the extension .xml (extensible markup language). We often refer to this file as the EML, which is the metadata standard that it uses. This is also what you see when you click on a page in the Arctic Data Center. Data: Other objects in a package are the data files themselves. Most commonly these are data tables (.csv), but they can also be audio files, NetCDF files, plain text files, PDF documents, image files, etc. Resource Map: The final object is the resource map. This object is a plain text file with the extension .rdf (Resource Description Framework) that defines the relationships between all of the other objects in the data package. It says things like “this metadata file describes this data file,” and is critical to making a data package render correctly on the website with the metadata file and all of the data files together in the correct place. Fortunately, we rarely, if ever, have to actually look at the contents of resource maps; they are generated for us using tools in R. From the DataOne Community Meeting (Session 7) 2.2 Packages on the Website All of the package information is represented when you go to the landing page for a dataset. When you make changes through R those published changes will be reflected here. Although you can edit the metadata directly from the webpage but we recommend to use R in most cases. 2.3 About identifiers Each object (metadata files, data files, resource maps) on the ADC or the KNB (another repo) has a unique identifier, also sometimes called a “PID” (persistent identifier). When you look at the landing page for a dataset, for example here, you can find the resource map identifier listed under the title in the gray bar after the words “Files in this dataset Package:” (resource_map_doi:10.18739/A2836Z), the metadata identifier in the “General &gt; Identifier” section of the metadata record or after the title with blue font (doi:10.18739/A2836Z), and the data identifier by clicking the “more info” link next to the data object, and looking at the “Online Distribution Info” section (arctic-data.9546.1). Note, all datasets submitted are given a temporary identifier. When the dataset is finalized, a doi will be issued. Different versions of a package are linked together by what we call the “version chain” or “obsolescence chain”. Making an update to a data package, such as replacing a data file, changing a metadata record, etc, will result in a new identifier for the new version of the updated object. When making changes to a package, always use the arcticdatautils::update_object() for adding new files or arcticdatautils::publish_update() for updating the entire package on the latest versions of all objects to ensure that the version chain is maintained. 2.4 Upload a package We will be using R to connect to the NSF Arctic Data Center (ADC) data repository to push and pull edits in actual datasets. To identify yourself as an admin you will need to pass a ‘token’ into R. Do this by signing in to the ADC with your ORCid and password, then hovering over your name in the top right corner and clicking on “My profile”, then navigating to “Settings” and “Authentication Token”, copying the “Token for DataONE R”, and finally pasting and running it in your R console. You will need to retrieve a new one after it either expires or you quit your R session. This token is your identity on these sites, please treat it as you would a password (i.e. don’t paste into scripts that will be shared). The easiest way to do this is to always run the token in the console. There’s no need to keep it in your script since it’s temporary anyway. Sometimes you’ll see a placeholder in scripts to remind users to get their token, such as: options(dataone_test_token = &quot;...&quot;) Next, please be sure these packages are loaded: library(devtools) library(dataone) library(datapack) library(EML) library(remotes) library(XML) If any package could not be loaded, use the following command (replacing package_name with the actual package name) to install the package, then load them. install.packages(&quot;package_name&quot;) Now install a couple of packages: remotes::install_github(&quot;nceas/arcticdatautils&quot;) library(arcticdatautils) remotes::install_github(&quot;nceas/datamgmt&quot;) library(datamgmt) For this training, we will be working exclusively on the Arctic test site, or “node.” In many of the functions you will use this will be the first argument. It is often referred to in documentation as mn, short for member node. More information on the other nodes can be found in the reference section under Set DataONE nodes Set DataONE nodes For example, if we are using the test site, set the node to the test Arctic node: cn_staging &lt;- CNode(&#39;STAGING&#39;) adc_test &lt;- getMNode(cn_staging,&#39;urn:node:mnTestARCTIC&#39;) Once all set up you can first publish an object (data) If you are curious how everything magically works, here is a handy diagram: From the DataOne Community Meeting (Session 7) 2.5 Publish an object Objects (data files, xml metadata files) can be published to a DataONE node using the function publish_object() from the arcticdatautils R Package. To publish an object, you must first get the formatId of the object you want to publish. A few common formatIds are listed below. # .csv file formatId &lt;- &quot;text/csv&quot; # .txt file formatId &lt;- &quot;text/plain&quot; # metadata file formatId &lt;- &quot;https://eml.ecoinformatics.org/eml-2.2.0&quot; # OR formatId &lt;- format_eml(&quot;2.2.0&quot;) Most objects have registered formatIds that can be found on the DataONE Object Format List here. Always use the “Id:” (2nd line) from the DataONE Object Format List and ensure it is copied EXACTLY. Metadata files (as shown above) use a special function to set the formatId. If the formatId is not listed at the DataONE website, you can set formatId &lt;- &quot;application/octet-stream&quot;. If you want to change the formatId please use updateSystemMetadata instead. Once you know the appropriate formatId you can publish an object using these commands: path &lt;- &quot;path/to/your/file&quot; formatId &lt;- &quot;your/formatId&quot; pid &lt;- publish_object(adc_test, path = path, format_id = formatId) # note that the output of this function is the PID of the newly published object After publishing the object, the PID will need to be added to a resource map by updating or creating a resource map. Additionally, the rights and access for the object must be set. However, you only need to give other people rights and access to objects to objects that are not yours, for the training you don’t need to do this. 2.6 Create a resource map If you are creating a new data package, you must create a resource map. Resource maps provide information about the resources in the data package (i.e. which data files are associated with a particular metadata file (xml)). Before creating a new resource map, it is best to ensure that all the objects of interest have already been published to the node. Therefore, if you’ve only run publish_object() on the xml (in section 2.4 above), you will also need to publish all the data objects you wish to associate with the xml. The resource map you are about to create controls these linkages. Once all the objects that ought to belong to the package have been published, create a resource map using their respective PIDs (or the variables you saved the PIDs to) via the arcticdatautils::create_resource_map() function, like so: resource_map_pid &lt;- create_resource_map(adc_test, metadata_pid = metadata_pid, data_pids = data_pids) 2.7 Exercise 2 This exercise will take you through how to do the submission process through R instead of the webform (exercise 1). 2.7.1 Part 1 - Gather your data files For our convenience, we will be grabbing the metadata and data files from the file we published earlier: Locate the data package you published in Exercise 1 by navigating to the “My Profile &gt; My Data” section on test.arcticdata.io. Download the metadata and data files and transfer them to the Datateam server. 2.7.2 Part 2 - Working in R Now we want to publish the metadata and data files we downloaded again to test.arcticdata.io Obtain a token and please note that for this exercise please make sure you grab the token from the arcticdata test site Publish your metadata and data file to the site. data_pid &lt;- publish_object(...) metadata_pid &lt;- publish_object(...) Create a resource map to connect your data and metadata. resource_map_pid &lt;- create_resource_map(adc_test, metadata_pid = metadata_pid, data_pids = data_pids) View your new data set by appending the metadata PID to the end of the URL test.arcticdata.io/#view/… If you are successful it should look the same as the dataset you created in exercise 1 "],["exploring-eml.html", "Chapter 3 Exploring EML 3.1 Navigate through EML 3.2 Understand the EML schema 3.3 Access specific elements", " Chapter 3 Exploring EML We use the Ecological Metadata Language (EML) to store structured metadata for all datasets submitted to the Arctic Data Center. EML is written in XML (extensible markup language) and functions for building and editing EML are in the EML R package. Currently the Arctic Data Center website supports editing EML version 2.1.1 but will move to 2.2.0 in the near future. For additional background on EML and principles for metadata creation, check out this paper. If you aren’t too familiar with lists and how to navigate them yet take a look at the relevant sections in the Stat 545 class: 3.1 Navigate through EML The first task when editing an EML file is navigating the EML file. An EML file is organized in a structure that contains many lists nested within other lists. The function View allows you to get a crude view of an EML file in the viewer. It can be useful for exploring the file. # Need to be in this member node to explore file cn_staging &lt;- CNode(&#39;STAGING&#39;) adc_test &lt;- getMNode(cn_staging,&#39;urn:node:mnTestARCTIC&#39;) doc &lt;- read_eml(getObject(adc_test, &quot;urn:uuid:558eabf1-1e91-4881-8ba3-ef8684d8f6a1&quot;)) View(doc) The complex EML document is represented in R as as series of named, nested lists. We use lists all the time in R! A data.frame is one example of a special kind of list that we use all the time. You may be familiar with the syntax dataframe$column_name which allows us to select a particular column of a data.frame. Under the hood, a data.frame is a named list of vectors with the same length. You select one of those vectors using the $ operator, which is called the “list selector operator.” Just like you navigate in a data.frame, you can use the $ operator to navigate through the EML structure. The $ operator allows you to go deeper into the EML structure and to see what elements are nested within other elements. However, you have to tell R where you want to go in the structure when you use the $ symbol. For example, if you want to view the dataset element of your EML you would use the command doc$dataset. If you want to view the creators of your data set you would use doc$dataset$creator. Note here that creator is contained within dataset. If you aren’t sure where you want to go, hit the tab button on your keyboard after typing $ and a list of available elements in the structure will appear (e.g., doc$&lt;TAB&gt;): Note that if you hit tab, and nothing pops up, this most likely implies that you are trying to go into an EML element that can take a series items. For example doc$dataset$creator$&lt;TAB&gt; will not show a pop-up menu. This is because creator is a series-type object (i.e. you can have multiple creators). If you want to go deeper into creator, you first must tell R which creator you are interested in. Do this by writing [[i]] first where i is the index of the creator you are concerned with. For example, if you want to look at the first creator i = 1. Now doc$dataset$creator[[1]]$&lt;TAB&gt; will give you many more options. Note, an empty autocomplete result sometimes means you have reached the end of a branch in the EML structure. At this point stop and take a deep breath. The key takeaway is that EML is a hierarchical tree structure. The best way to get familiar with it is to explore the structure. Try entering doc$dataset into your console, and print it. Now make the search more specific, for instance: doc$dataset$abstract. 3.2 Understand the EML schema Another great resource for navigating the EML structure is looking at the schema which defines the structure. The schema diagrams on this page are interactive. Further explanations of the symbology can be found here. The schema is complicated and may take some time to get familiar with before you will be able to fully understand it. For example, let’s take a look at eml-party. To start off, notice that some elements have bolded lines leading to them. A bold line indicates that the element is required if the element above it (to the left in the schema) is used, otherwise the element is optional. Notice also that next to the givenName element it says “0..infinity”. This means that the element is unbounded — a single party can have many given names and there is no limit on how many you can add. However, this text does not appear for the surName element — a party can have only one surname. You will also see icons linking the EML slots together, which indicate the ordering of subsequent slots. These can indicate either a “sequence” or a “choice”. In our example from eml-party, a “choice” icon indicates that either an individualName, organizationName, or positionName is required, but you do not need all three. However, the “sequence” icon tells us that if you use an individualName, you must include the surName as a child element. If you include the optional child elements salutation and givenName, they must be written in the order presented in the schema. The eml schema sections you may find particularly helpful include eml-party, eml-attribute and eml-physical. For a more detailed description of the EML schema, see the reference section on exploring EML. 3.3 Access specific elements The eml_get() function is a powerful tool for exploring EML (more on that here ). It takes any chunk of EML and returns all instances of the element you specify. Note: you’ll have to specify the element of interest exactly, according to the spelling/capitalization conventions used in EML. Here are some examples: doc &lt;- read_eml(system.file(&quot;example-eml.xml&quot;, package = &quot;arcticdatautils&quot;)) eml_get(doc, &quot;creator&quot;) individualName: givenName: Bryce surName: Mecum organizationName: National Center for Ecological Analysis and Synthesis eml_get(doc, &quot;boundingCoordinates&quot;) eastBoundingCoordinate: &#39;-134&#39; northBoundingCoordinate: &#39;59&#39; southBoundingCoordinate: &#39;57&#39; westBoundingCoordinate: &#39;-135&#39; eml_get(doc, &quot;url&quot;) &#39;&#39;: function: download url: ecogrid://knb/urn:uuid:89bec5d0-26db-48ac-ae54-e1b4c999c456 &#39;&#39;: ecogrid://knb/urn:uuid:89bec5d0-26db-48ac-ae54-e1b4c999c456 eml_get_simple() is a simplified alternative to eml_get() that produces a list of the desired EML element. eml_get_simple(doc$dataset$otherEntity, &quot;entityName&quot;) To find an eml element you can use either a combination of which_in_emlfrom the arcticdatautils package or eml_get_simple and which to find the index in an EML list. Use which ever workflow you see fit. An example question you may have: Which creators have a surName “Mecum”? Example using which_in_eml: n &lt;- which_in_eml(doc$dataset$creator, &quot;surName&quot;, &quot;Mecum&quot;) # Answer: doc$dataset$creator[[n]] Example using eml_get_simple and which: ent_names &lt;- eml_get_simple(doc$dataset$creator, &quot;surName&quot;) i &lt;- which(ent_names == &quot;Mecum&quot;) # Answer: doc$dataset$creator[[i]] "],["editing-eml.html", "Chapter 4 Editing EML 4.1 Get package and EML 4.2 Edit an EML element 4.3 FAIR data practices 4.4 Edit attributeLists 4.5 Set physical 4.6 Edit dataTables 4.7 Edit otherEntities 4.8 Semantic annotations 4.9 Exercise 3a 4.10 Edit spatial data 4.11 Set coverages 4.12 Set methods 4.13 Set parties 4.14 Validate EML and update package 4.15 Exercise 3b", " Chapter 4 Editing EML This chapter is a practical tutorial for using R to read, edit, write, and validate EML documents. Much of the information here can also be found in the vignettes for the R packages used in this section (e.g. the EML package). This chapter will be longest of all the sections! This is a reminder to take frequent breaks when completing this section. 4.1 Get package and EML Before we look more in depth at EML, we first need to load your data package into R. After setting your node, use the following commands to load the package: rm_pid &lt;- &quot;your_resource_map_pid&quot; pkg &lt;- get_package(adc_test, rm_pid, file_names = TRUE) Keeping track of PIDs In all subsequent sections, if they ask for the pid of the metadata, reasource map or data you can refer to the object from get_package(). For example, if you assigned the value from get_package() as above as pkg then you can refer to the following by using the corresponding commands: metadata_pid &lt;- pkg$metadata data_pid &lt;- pkg$data resource_pid &lt;- pkg$resource_map After loading the package, you can also load the EML file into R using the following command: doc &lt;- read_eml(getObject(adc_test, pkg$metadata)) Note that we named the object doc. This is a good generic name to use for EML documents. The generic name eml should not be used - as the EML package ships with an eml function, which can cause namespace issues in your environment if you have an object also called eml. Tip to always have the most recent resource map. When editing data packages, you always want to be working with the most recent update. To ensure you have the most recent resource map, you can use the following commands: rm_pid_original &lt;- &quot;your_original_resource_map_pid&quot; all_rm_versions &lt;- get_all_versions(adc_test, rm_pid_original) rm_pid &lt;- all_rm_versions[length(all_rm_versions)] print(rm_pid) 4.2 Edit an EML element There are multiple ways to edit an EML element. 4.2.1 Edit EML with strings The most basic way to edit an EML element would be to navigate to the element and replace it with something else. Easy! For example, to change the title one could use the following command: doc$dataset$title &lt;- &quot;New Title&quot; If the element you are editing allows for multiple values, you can pass it a list of character strings. Since a dataset can have multiple titles, we can do this: doc$dataset$title &lt;- list(&quot;New Title&quot;, &quot;Second New Title&quot;) However, this isn’t always the best method to edit the EML, particularly if the element has sub-elements. 4.2.2 Edit EML with the “EML” package To edit a section where you are not 100% sure of the sub-elements, using the eml$elementName() helper functions from the EML package will pre-populate the options for you if you utilize the RStudio autocomplete functionality. The arguments in these functions show the available slots for any given EML element. For example, typing doc$dataset$abstract &lt;- eml$abstract()&lt;TAB&gt; will show you that the abstract element can take either the section or para sub-elements. doc$dataset$abstract &lt;- eml$abstract(para = &quot;A concise but thorough description of the who, what, where, when, why, and how of a dataset.&quot;) This inserts the abstract with a para element in our dataset, which we know from the EML schema is valid. Note that the above is equivalent to the following generic construction: doc$dataset$abstract &lt;- list(para = &quot;A concise but thorough description of the who, what, where, when, why, and how of a dataset.&quot;) The eml() family of functions provides the sub-elements as arguments, which is extremely helpful, but functionally all it is doing is creating a named list, which you can also do using the list function. 4.2.3 Edit EML with objects A final way to edit an EML element would be to build a new object to replace the old object. To begin, you might create an object using an eml helper function. Let’s take keywords as an example. Sometimes keyword lists in a metadata record will come from different thesauruses, which you can then add in series (similar to the way we added multiple titles) to the element keywordSet. We start by creating our first set of keywords and saving it to an object. kw_list_1 &lt;- eml$keywordSet(keywordThesaurus = &quot;LTER controlled vocabulary&quot;, keyword = list(&quot;bacteria&quot;, &quot;carnivorous plants&quot;, &quot;genetics&quot;, &quot;thresholds&quot;)) Which returns: $keyword $keyword[[1]] [1] &quot;bacteria&quot; $keyword[[2]] [1] &quot;carnivorous plants&quot; $keyword[[3]] [1] &quot;genetics&quot; $keyword[[4]] [1] &quot;thresholds&quot; $keywordThesaurus [1] &quot;LTER controlled vocabulary&quot; We create the second keyword list similarly: kw_list_2 &lt;- eml$keywordSet(keywordThesaurus = &quot;LTER core area&quot;, keyword = list(&quot;populations&quot;, &quot;inorganic nutrients&quot;, &quot;disturbance&quot;)) Finally, we can insert our two keyword lists into our EML document just like we did with the title example above, but rather than passing character strings into list(), we will pass our two keyword set objects. doc$dataset$keywordSet &lt;- list(kw_list_1, kw_list_2) Note that you must use the function list here and not the c() function. The reasons for this are complex, and due to some technical subtlety in R - but the gist of the issue is that the c() function can behave in unexpected ways with nested lists, and frequently will collapse the nesting into a single level, resulting in invalid EML. 4.3 FAIR data practices The result of these function calls won’t show up on the webpage but they will add a publisher element to the dataset element and a system to all of the entities based on what the PID is. This will help make our metadata more FAIR (Findable, Accessible, Interoperable, Reusable). Add the following lines to all of your data processing scripts. doc &lt;- eml_add_publisher(doc) doc &lt;- eml_add_entity_system(doc) 4.4 Edit attributeLists Attributes are stored in an attributeList. When editing attributes in R, you need to create one to three objects: A data.frame of attributes A data.frame of custom units (if applicable) Attributes can exist in EML for dataTable, otherEntity, and spatialVector data objects. Please note that submitting attribute information through the website will store them in an otherEntity object by default. We prefer to store them in a dataTable object for tabular data or a spatialVector object for spatial data. To edit or examine an existing attribute table already in an EML file, you can use the following commands, where i represents the index of the series element you are interested in. Note that if there is only one item in the series (ie there is only one dataTable), you should just call doc$dataset$dataTable, as in this case doc$dataset$dataTable[[1]] will return the first sub-element of the dataTable (the entityName) # If they are stored in an otherEntity (submitted from the website by default) attributeList &lt;- EML::get_attributes(doc$dataset$otherEntity[[i]]$attributeList) # Or if they are stored in a dataTable (usually created by a datateam member) attributeList &lt;- EML::get_attributes(doc$dataset$dataTable[[i]]$attributeList) # Or if they are stored in a spatialVector (usually created by a datateam member) attributeList &lt;- EML::get_attributes(doc$dataset$spatialVector[[i]]$attributeList) attributes &lt;- attributeList$attributes print(attributes) 4.4.1 Edit attributes Attribute information should be stored in a data.frame with the following columns: attributeName: The name of the attribute as listed in the csv. Required. e.g.: “c_temp” attributeLabel: A descriptive label that can be used to display the name of an attribute. It is not constrained by system limitations on length or special characters. Optional. e.g.: “Temperature (Celsius)” attributeDefinition: Longer description of the attribute, including the required context for interpreting the attributeName. Required. e.g.: “The near shore water temperature in the upper inter-tidal zone, measured in degrees Celsius.” measurementScale: One of: nominal, ordinal, dateTime, ratio, interval. Required. nominal: unordered categories or text. e.g.: (Male, Female) or (Yukon River, Kuskokwim River) ordinal: ordered categories. e.g.: Low, Medium, High dateTime: date or time values from the Gregorian calendar. e.g.: 01-01-2001 ratio: measurement scale with a meaningful zero point in nature. Ratios are proportional to the measured variable. e.g.: 0 Kelvin represents a complete absence of heat. 200 Kelvin is half as hot as 400 Kelvin. 1.2 meters per second is twice as fast as 0.6 meters per second. interval: values from a scale with equidistant points, where the zero point is arbitrary. This is usually reserved for degrees Celsius or Fahrenheit, or latitude and longitude coordinates, or any other human-constructed scale. e.g.: there is still heat at 0° Celsius; 12° Celsius is NOT half as hot as 24° Celsius. domain: One of: textDomain, enumeratedDomain, numericDomain, dateTime. Required. textDomain: text that is free-form, or matches a pattern enumeratedDomain: text that belongs to a defined list of codes and definitions. e.g.: CASC = Cascade Lake, HEAR = Heart Lake dateTimeDomain: dateTime attributes numericDomain: attributes that are numbers (either ratio or interval) formatString: Required for dateTime, NA otherwise. Format string for dates, e.g. “DD/MM/YYYY”. definition: Required for textDomain, NA otherwise. Definition for attributes that are a character string, matches attribute definition in most cases. unit: Required for numericDomain, NA otherwise. Unit string. If the unit is not a standard unit, a warning will appear when you create the attribute list, saying that it has been forced into a custom unit. Use caution here to make sure the unit really needs to be a custom unit. A list of standard units can be found using: standardUnits &lt;- EML::get_unitList() then running View(standardUnits$units). numberType: Required for numericDomain, NA otherwise. Options are real, natural, whole, and integer. real: positive and negative fractions and integers (…-1,-0.25,0,0.25,1…) natural: non-zero positive integers (1,2,3…) whole: positive integers and zero (0,1,2,3…) integer: positive and negative integers and zero (…-2,-1,0,1,2…) missingValueCode: Code for missing values (e.g.: ‘-999’, ‘NA’, ‘NaN’). NA otherwise. Note that an NA missing value code should be a string, ‘NA’, and numbers should also be strings, ‘-999.’ missingValueCodeExplanation: Explanation for missing values, NA if no missing value code exists. You can create attributes manually by typing them out in R following a workflow similar to the one below: attributes &lt;- data.frame( attributeName = c(&#39;Date&#39;, &#39;Location&#39;, &#39;Region&#39;,&#39;Sample_No&#39;, &#39;Sample_vol&#39;, &#39;Salinity&#39;, &#39;Temperature&#39;, &#39;sampling_comments&#39;), attributeDefinition = c(&#39;Date sample was taken on&#39;, &#39;Location code representing location where sample was taken&#39;,&#39;Region where sample was taken&#39;, &#39;Sample number&#39;, &#39;Sample volume&#39;, &#39;Salinity of sample in PSU&#39;, &#39;Temperature of sample&#39;, &#39;comments about sampling process&#39;), measurementScale = c(&#39;dateTime&#39;, &#39;nominal&#39;,&#39;nominal&#39;, &#39;nominal&#39;, &#39;ratio&#39;, &#39;ratio&#39;, &#39;interval&#39;, &#39;nominal&#39;), domain = c(&#39;dateTimeDomain&#39;, &#39;enumeratedDomain&#39;,&#39;enumeratedDomain&#39;, &#39;textDomain&#39;, &#39;numericDomain&#39;, &#39;numericDomain&#39;, &#39;numericDomain&#39;, &#39;textDomain&#39;), formatString = c(&#39;MM-DD-YYYY&#39;, NA,NA,NA,NA,NA,NA,NA), definition = c(NA,NA,NA,&#39;Sample number&#39;, NA, NA, NA, &#39;comments about sampling process&#39;), unit = c(NA, NA, NA, NA,&#39;milliliter&#39;, &#39;dimensionless&#39;, &#39;celsius&#39;, NA), numberType = c(NA, NA, NA,NA, &#39;real&#39;, &#39;real&#39;, &#39;real&#39;, NA), missingValueCode = c(NA, NA, NA,NA, NA, NA, NA, &#39;NA&#39;), missingValueCodeExplanation = c(NA, NA, NA,NA, NA, NA, NA, &#39;no sampling comments&#39;)) However, typing this out in R can be a major pain. Luckily, there’s a Shiny app that you can use to build attribute information. You can use the app to build attributes from a data file loaded into R (recommended as the app will auto-fill some fields for you) to edit an existing attribute table, or to create attributes from scratch. Use the following commands to create or modify attributes (these commands will launch a Shiny app in your web browser): #first download the CSV in your data package from Exercise #2 data &lt;- read.csv(text=rawToChar(getObject(adc_test, pkg$data))) # From data (recommended) EML::shiny_attributes(data = data) # From an existing attribute table attributeList &lt;- get_attributes(doc$dataset$dataTable[[i]]$attributeList) EML::shiny_attributes(data = NULL, attributes = attributeList$attributes) # From scratch atts &lt;- EML::shiny_attributes() Once you are done editing a table in the app, quit the app and the tables will be assigned to the atts variable as a list of data frames (one for attributes, factors, and units). Alternatively, each table can be to exported to a csv file by clicking the Download button. If you downloaded the table, read the table back into your R session and assign it to a variable in your script (e.g. attributes &lt;- data.frame(...)), or just use the variable that shiny_attributes returned. For simple attribute corrections, datamgmt::edit_attribute() allows you to edit the slots of a single attribute within an attribute list. To use this function, pass an attribute through datamgmt::edit_attribute() and fill out the parameters you wish to edit/update. An example is provided below where we are changing attributeName, domain, and measurementScale in the first attribute of a dataset. After completing the edits, insert the new version of the attribute back into the EML document. new_attribute &lt;- datamgmt::edit_attribute(doc$dataset$dataTable[[1]]$attributeList$attribute[[1]], attributeName = &#39;date_and_time&#39;, domain = &#39;dateTimeDomain&#39;, measurementScale = &#39;dateTime&#39;) doc$dataset$dataTable[[1]]$attributeList$attribute[[1]] &lt;- new_attribute 4.4.2 Edit custom units EML has a set list of units that can be added to an EML file. These can be seen by using the following code: standardUnits &lt;- EML::get_unitList() View(standardUnits$units) Search the units list for your unit before attempting to create a custom unit. You can search part of the unit you can look up part of the unit ie meters in the table to see if there are any matches. If you have units that are not in the standard EML unit list, you will need to build a custom unit list. A unit typically consists of the following fields: id: The unit id (ids are camelCased) unitType: The unitType (run View(standardUnits$unitTypes) to see standard unitTypes) parentSI: The parentSI unit (e.g. for kilometer parentSI = “meter”) multiplierToSI: Multiplier to the parentSI unit (e.g. for kilometer multiplierToSI = 1000) name: Unit abbreviation (e.g. for kilometer name = “km”) description: Text defining the unit (e.g. for kilometer description = “1000 meters”) To manually generate the custom units list, create a dataframe with the fields mentioned above. An example is provided below that can be used as a template: custom_units &lt;- data.frame( id = c(&#39;siemensPerMeter&#39;, &#39;decibar&#39;), unitType = c(&#39;resistivity&#39;, &#39;pressure&#39;), parentSI = c(&#39;ohmMeter&#39;, &#39;pascal&#39;), multiplierToSI = c(&#39;1&#39;,&#39;10000&#39;), abbreviation = c(&#39;S/m&#39;,&#39;decibar&#39;), description = c(&#39;siemens per meter&#39;, &#39;decibar&#39;)) Using EML::get_unit_id for custom units will also generate valid EML unit ids. Custom units are then added to additionalMetadata using the following command: unitlist &lt;- set_unitList(custom_units, as_metadata = TRUE) doc$additionalMetadata &lt;- list(metadata = list(unitList = unitlist)) 4.4.3 Edit factors For attributes that are enumeratedDomains, a table is needed with three columns: attributeName, code, and definition. attributeName should be the same as the attributeName within the attribute table and repeated for all codes belonging to a common attribute. code should contain all unique values of the given attributeName that exist within the actual data. definition should contain a plain text definition that describes each code. To build factors by hand, you use the named character vectors and then convert them to a data.frame as shown in the example below. In this example, there are two enumerated domains in the attribute list - “Location” and “Region”. Location &lt;- c(CASC = &#39;Cascade Lake&#39;, CHIK = &#39;Chikumunik Lake&#39;, HEAR = &#39;Heart Lake&#39;, NISH = &#39;Nishlik Lake&#39; ) Region &lt;- c(W_MTN = &#39;West region, locations West of Eagle Mountain&#39;, E_MTN = &#39;East region, locations East of Eagle Mountain&#39;) The definitions are then written into a data.frame using the names of the named character vectors and their definitions. factors &lt;- rbind(data.frame(attributeName = &#39;Location&#39;, code = names(Location), definition = unname(Location)), data.frame(attributeName = &#39;Region&#39;, code = names(Region), definition = unname(Region))) 4.4.4 Finalize attributeList Once you have built your attributes, factors, and custom units, you can add them to EML objects. Attributes and factors are combined to form an attributeList using the following command: attributeList &lt;- EML::set_attributes(attributes = attributes, factors = factors) This attributeList must then be added to a dataTable. 4.5 Set physical To set the physical aspects of a data object, use the following commands to build a physical object from a data PID that exists in your package. Remember to set the member node to test.arcticdata.io! physical &lt;- arcticdatautils::pid_to_eml_physical(mn, pkg$data[[i]]) Alternatively, you can set the physical of a data object not yet in your package by simply inputting the data PID: physical &lt;- arcticdatautils::pid_to_eml_physical(mn, &quot;your_data_pid&quot;) The physical must then be assigned to the data object. A final, but not recommended option, is to set the physical by hand. To do so, one can use a workflow similar to the one below. However, the far superior workflow is to publish or update your data first and then use pid_to_eml_physical() to set the physical. id &lt;- &#39;your_data_pid&#39; # this should be an actual PID path &lt;- &#39;~/your/data/path&#39; # path to data table physical &lt;- set_physical(objectName = path, size = as.character(file.size(path)), sizeUnit = &#39;bytes&#39;, authentication = digest(fpath, algo=&quot;sha256&quot;, serialize=FALSE, file=TRUE), authMethod = &#39;SHA-256&#39;, numHeaderLines = &#39;1&#39;, fieldDelimiter = &#39;,&#39;, url = paste0(&#39;https://cn.dataone.org/cn/v2/resolve/&#39;, id)) 4.6 Edit dataTables To edit a dataTable, first edit/create an attributeList and set the physical. Then create a new dataTable using the eml$dataTable() helper function as below: dataTable &lt;- eml$dataTable(entityName = &quot;A descriptive name for the data (does not need to be the same as the data file)&quot;, entityDescription = &quot;A description of the data&quot;, physical = physical, attributeList = attributeList) The dataTable must then be added to the EML. How exactly you do this will depend on whether there are dataTable elements in your EML, and how many there are. To replace whatever dataTable elements already exist, you could write: doc$dataset$dataTable &lt;- dataTable If there is only one dataTable in your dataset, the EML package will usually “unpack” these, so that it is not contained within a list of length 1 - this means that to add a second dataTable, you cannot use the syntax doc$dataset$dataTable[[2]], since when unpacked this will contain the entityDescription as opposed to pointing to the second in a series of dataTable elements. Confusing - I know. Not to fear though - this syntax will get you on your way, should you be trying to add a second dataTable. doc$dataset$dataTable &lt;- list(doc$dataset$dataTable, dataTable) If there is more than one dataTable in your dataset, you can return to the more straightforward construction of: doc$dataset$dataTable[[i]] &lt;- dataTable Where i is the index that you wish insert your dataTable into. To add a list of dataTables to avoid the unpacking problem above you will need to create a list of dataTables dts &lt;- list() # create an empty list for(i in seq_along(tables_you_need)){ # your code modifying/creating the dataTable here dataTable &lt;- eml$dataTable(entityName = dataTable$entityName, entityDescription = dataTable$entityDescription, physical = physical, attributeList = attributeList) dts[[i]] &lt;- dataTable # add to the list } After getting a list of dataTables, assign the resulting list to dataTable EML doc$dataset$dataTable &lt;- dts By default, the online submission form adds all entities as otherEntity, even when most should probably be dataTable. You can use eml_otherEntity_to_dataTable to easily move items in otherEntity over to dataTable. Most tabular data or data that contain variables should be listed as a dataTable. Data that do not contain variables (eg: plain text readme files, pdfs, jpegs) should be listed as otherEntity. eml_otherEntity_to_dataTable(doc, 1, # which otherEntities you want to convert, for multiple use - 1:5 validate_eml = F) # set this to False if the physical or attributes are not added 4.7 Edit otherEntities 4.7.1 Remove otherEntities To remove an otherEntity use the following command. This may be useful if a data object is originally listed as an otherEntity and then transferred to a dataTable. doc$dataset$otherEntity[[i]] &lt;- NULL 4.7.2 Create otherEntities If you need to create/update an otherEntity, make sure to publish or update your data object first (if it is not already on the DataONE MN). Then build your otherEntity. otherEntity &lt;- arcticdatautils::pid_to_eml_entity(mn, pkg$data[[i]]) Alternatively, you can build the otherEntity of a data object not in your package by simply inputting the data PID. otherEntity &lt;- arcticdatautils::pid_to_eml_entity(mn, &quot;your_data_pid&quot;, entityType = &quot;otherEntity&quot;, entityName = &quot;Entity Name&quot;, entityDescription = &quot;Description about entity&quot;) The otherEntity must then be set to the EML, like so: doc$dataset$otherEntity &lt;- otherEntity If you have more than one otherEntity object in the EML already, you can add the new one like this: doc$dataset$otherEntity[[i]] &lt;- otherEntity Where i is set to the number of existing entities plus one. Remember the warning from the last section, however. If you only have one otherEntity, and you are trying to add another, you have to run: doc$dataset$otherEntity &lt;- list(otherEntity, doc$dataset$otherEntity) 4.8 Semantic annotations For a brief overview of what a semantic annotation is, and why we use them check out this video. Even more information on how to add semantic annotations to EML 2.2.0 can be found here. Currently metacatUI does not support the editing of semantic annotations on the website so all changes will have to be done in R. There are several elements in the EML 2.2.0 schema that can be annotated: dataset entity (eg: otherEntity or dataTable) attribute On the datateam, we will only be adding annotations to attributes for now. 4.8.1 How annotations are used This is a dataset that has semantic annotations included. On the website you can see annotations in each of the attributes. You can click on any one of them to search for more datasets with that same annotation. 4.8.1.1 Attribute-level annotations To add annotations to the attributeList you will need information about the propertyURI and valueURI Annotations are essentially composed of a sentence, which contains a subject (the attribute), predicate (propertyURI), and object (valueURI). Because of the way our search interface is built, for now we will be using attribute annotations that have a propertyURI label of “contains measurements of type”. Here is what an annotation for an attribute looks like in R. Note that both the propertyURI and valueURI have both a label, and the URI itself. doc$dataset$dataTable[[i]]$attributeList$attribute[[i]]$annotation $id [1] &quot;ODBcOyaTsg&quot; $propertyURI $propertyURI$label [1] &quot;contains measurements of type&quot; $propertyURI$propertyURI [1] &quot;http://ecoinformatics.org/oboe/oboe.1.2/oboe-core.owl#containsMeasurementsOfType&quot; $valueURI $valueURI$label [1] &quot;Distributed Biological Observatory region identifier&quot; $valueURI$valueURI [1] &quot;http://purl.dataone.org/odo/ECSO_00002617&quot; Semantic attribute annotations can be applied to spatialRasters, spatialVectors and dataTables 4.8.2 How to add an annotation 1. Decide which variable to annotate The goal for the datateam is to start annotating every dataset that comes in. Please make sure to add semantic annotations to spatial and temporal features such as latitude, longitude, site name and date and aim to annotate as many attributes as possible. 2. Find an appropriate valueURI The next step is to find an appropriate value to fill in the blank of the sentence: “this attribute contains measurements of _____.” There are several ontologies to search in. In order of most to least likely to be relevant to the Arctic Data Center they are: The Ecosystem Ontology (ECSO) this was developed at NCEAS, and has many terms that are relevant to ecosystem processes, especially those involving carbon and nutrient cycling The Environment Ontology (EnVO) this is an ontology for the concise, controlled description of environments National Center for Biotechnology Information (NCBI) Organismal Classification (NCBITAXON) The NCBI Taxonomy Database is a curated classification and nomenclature for all of the organisms in the public sequence databases. Information Artifact Ontology (IAO) this ontology contains terms related to information entities (eg: journals, articles, datasets, identifiers) To search, navigate through the “classes” until you find an appropriate term. When we are picking terms, it is important that we not just pick a similar term or a term that seems close - we want a term that is totally “right”. For example, if you have an attribute for carbon tetroxide flux and an ontology with a class hierarchy like this: – carbon flux |—- carbon dioxide flux Our exact attribute, carbon tetroxide flux is not listed. In this case, we should pick “carbon flux” as it’s completely correct and not “carbon dioxide flux” because it’s more specific but not quite right. For general attributes (such as ones named depth or length), it is important to be as specific as possible about what is being measured. e.g. selecting the lake area annotation for the area attribute in this dataset 3. Build the annotation in R 4.8.2.1 Manually Annotating this method is great for when you are inserting 1 annotation, fixing an existing annotation or programmatically updating annotations for multiple attributeLists First you need to figure out the index of the attribute you want to annotate. eml_get_simple(doc$dataset$dataTable[[3]]$attributeList, &quot;attributeName&quot;) [1] &quot;prdM&quot; &quot;t090C&quot; &quot;t190C&quot; &quot;c0mS/cm&quot; &quot;c1mS/cm&quot; &quot;sal00&quot; &quot;sal11&quot; &quot;sbeox0V&quot; &quot;flECO-AFL&quot; [10] &quot;CStarTr0&quot; &quot;cpar&quot; &quot;v0&quot; &quot;v4&quot; &quot;v6&quot; &quot;v7&quot; &quot;svCM&quot; &quot;altM&quot; &quot;depSM&quot; [19] &quot;scan&quot; &quot;sbeox0ML/L&quot; &quot;sbeox0dOV/dT&quot; &quot;flag&quot; Next, assign an id to the attribute. It should be unique within the document, and it’s nice if it is human readable and related to the attribute it is describing. One format you could use is entity_x_attribute_y which should be unique in scope, and is nice and descriptive. doc$dataset$dataTable[[3]]$attributeList$attribute[[6]]$id &lt;- &quot;entity_ctd_attribute_salinity&quot; Now, assign the propertyURI information. This will be the same for every annotation you build. doc$dataset$dataTable[[3]]$attributeList$attribute[[6]]$annotation$propertyURI &lt;- list(label = &quot;contains measurements of type&quot;, propertyURI = &quot;http://ecoinformatics.org/oboe/oboe.1.2/oboe-core.owl#containsMeasurementsOfType&quot;) Finally, add the valueURI information from your search. You should see an ID on the Bioportal page that looks like a URL - this is the valueURI. Use the value to populate the label element. doc$dataset$dataTable[[3]]$attributeList$attribute[[6]]$annotation$valueURI &lt;- list(label = &quot;Water Salinity&quot;, valueURI = &quot;http://purl.dataone.org/odo/ECSO_00001164&quot;) 4.8.2.2 Shiny Attributes this method is great for when you are updating many attributes On the far right of the table of shiny_attributes there are 4 columns: id, propertyURI, propertyLabel, valueURI, valueLabel that can be filled out. 4.9 Exercise 3a The metadata for the dataset created earlier in Exercise 2 was not very complete. Here we will add a attribute and physical to our entity (the csv file). Make sure your package from before is loaded into R. Convert otherEntity into dataTable. Replace the existing dataTable with a new dataTable object with an attributelist and physical section you write in R using the above commands. Add semantic annotations for attribute area. We will continue using the objects created and updated in this exercise in 3b. 4.10 Edit spatial data Occasionally, you may encounter a third type of data object: spatialVector and spatialRaster. These objects contains spatial data (ie maps), such as a shapefile or geodatabase. Editing a spatialVector or spatialRaster is similar to editing a dataTable or an otherEntity. A physical and attributeList should be present. We will focus on how to get the information unique to spatialData and how to create the spatialVector/spatialRaster 4.10.0.1 File types File extensions to look for that might be spatial data: kml, geoJSON, geoTIFF, .dbf, .shp, and .shx Additionally, spatial data that involve multiple files should typically be archived within a .zip file to ensure all related and interdependent files stay together (ie . a geodatabase). This is one of the exceptions to our rule regarding .zip files. For example, a spatial dataset for a shapefile should, at a minimum, consist of separate .dbf, .shp, and .shx files with the same prefix in the same directory. All these files are required in order to use the data. Also note that shapefiles limit attribute names to 10 characters, so attribute names in the metadata may not match exactly to attribute names in the data. Some spatial raster data come as standalone files (.tiff or .nc) and some come as a group of files. If you aren’t sure whether to unzip a file, ask Jasmine or Jeanette. There are specific formatIds for these kinds of zipped files: application/vnd.shp+zip image/geotiff+zip. Remember to check that the files have the correct formatId 4.10.1 Reading Spatial Files Read in the files to (1) help you in creating your attributes table and (2) sometimes also figure out the coordinate reference system. library(sf) spatial_file &lt;- sf::read_sf(&quot;example.kml&quot;) When you read kml files, read_sf() sometimes shows additional columns that aren’t in the actual file. Always open kml files in text editor to check if the columns actually exist. If it is a zipped shapefile there is a handy function you can use arcticdatautils::read_zip_shapefile(mn, pid) 4.10.1.1 Coordinate Systems The coordinate system allow to work with spatial data using the same frame of reference (a Datum). A common coordinate system is “GCS_WGS_1984 (used in Google Maps!) which is suitable for plotting points distributed globally. There are many others that may be better suited for certain areas in the world. All latitudes and longitude coordinates should have a coordinate system (like a frame of reference). There are horizontal coordinate systems (earth’s surface) and vertical coordinate systems (depth). More information can be found here. To find the horizCoordSysName you can use: sf::st_crs(spatial_file) Take the Datum and add GCS (Geographic Coordinate System) in front. For example: “GCS_WGS_1984” 4.10.2 spatialVector 4.10.2.1 Adding Geometry One important difference is that a spatialVector object should also have a geometry slot that describes the geometry features of the data. The possible values include one or more (in a list) of ‘Point’, ‘LineString’, ‘LinearRing’, ‘Polygon’, ‘MultiPoint’, ‘MultiLineString’, ‘MultiPolygon’, or ‘MultiGeometry’. You will likely have to open the file itself within QGIS or R (ie . the sf package) to get the correct geometry value. To add just a geometry slot use: doc$dataset$spatialVector[[1]]$geometry &lt;- &quot;Polygon&quot; To add it using the data pid: 1. Get the geometry and spatialReference 2. Use pid_to_eml_entity() to generate the spatialVector spatialVector &lt;- pid_to_eml_entity(adc, pkg$data[n], entity_type = &quot;spatialVector&quot;, entityName = &quot;filename.kml&quot;, entityDescription = &quot;some desciption&quot;, attributeList = attributeList, geometry = &quot;Point&quot;, spatialReference = list(horizCoordSysName = &quot;GCS_WGS_1984&quot;)) Add the spatialVector to the doc doc$dataset$spatialVector[[1]] &lt;- spatialVector 4.10.3 spatialRasters Most often these come in GeoTiff or Tiff files. The data is presented as a grid of “pixels”. For more information ESRI has a indepth article here. To use the helper function get: the path of your raster file an attribute table a coordinate system To get a coordinate system name, you can use the output of the function on your first try (which will print the coordinate reference system, if it is defined). You can use the return value of get_coord_list() (a large data.frame) to find the correct coordinate system name. Another way to get the coordinate system name is using rgdal::GDALinfo(path). This function can provide many details for your GeoTiff or Tiff files including the coordinate system name. More information can be found here here. rgdal::GDALinfo(path) eml_get_raster_metadata(path, coord_name, attributes) 4.11 Set coverages Sometimes EML documents may lack coverage information describing the temporal, geographic, or taxonomic coverage of a data set. This example shows how to create coverage information from scratch, or replace an existing coverage element with an updated one. You can view the current coverage (if it exists) by entering doc$dataset$coverage into the console. Here the coverage, including temporal, taxonomic, and geographic coverages, is defined using set_coverage(). coverage &lt;- EML::set_coverage(beginDate = &#39;2012-01-01&#39;, endDate = &#39;2012-01-10&#39;, sci_names = c(&#39;exampleGenus exampleSpecies1&#39;, &#39;exampleGenus ExampleSpecies2&#39;), geographicDescription = &quot;The geographic region covers the lake region near Eagle Mountain, Alaska.&quot;, west = -154.6192, east = -154.5753, north = 68.3831, south = 68.3619) doc$dataset$coverage &lt;- coverage 4.11.1 Set multiple coverages You can also set multiple geographic (or temporal) coverages. Here is an example of how you might set two geographic coverages. Note that we use nested eml function helpers in this construction. geocov1 &lt;- eml$geographicCoverage(geographicDescription = &quot;The geographich region covers area 1&quot;, boundingCoordinates = eml$boundingCoordinates( northBoundingCoordinate = 68, eastBoundingCoordinate = -154, southBoundingCoordinate = 67, westBoundingCoordinate = -155)) geocov2 &lt;- eml$geographicCoverage(geographicDescription = &quot;The geographich region covers area 2&quot;, boundingCoordinates = eml$boundingCoordinates( northBoundingCoordinate = 65, eastBoundingCoordinate = -151, southBoundingCoordinate = 62, westBoundingCoordinate = -153)) coverage &lt;- EML::set_coverage(beginDate = &#39;2012-01-01&#39;, endDate = &#39;2012-01-10&#39;, sci_names = list(&#39;exampleGenus exampleSpecies1&#39;, &#39;exampleGenus ExampleSpecies2&#39;)) doc$dataset$coverage$geographicCoverage &lt;- list(geocov1, geocov2) 4.11.2 Special coverages 4.11.2.1 Arctic Circle For arctic circle geographic coverage, we only have the starting vertical line of the circle shown in the projection. Here is an example with arctic circle geographic coverage. 4.11.2.2 Geologic dates Example dataset with geologic coverages set using the following: geo_time_start &lt;- EML::eml$alternativeTimeScale(timeScaleName = &quot;Absolute&quot;, timeScaleAgeEstimate = &quot;7.5 Myr&quot;) coverage &lt;- EML::set_coverage(beginDate = &#39;2012-01-01&#39;, endDate = &#39;2012-01-10&#39;, doc$dataset$coverage &lt;- coverage 4.12 Set methods The methods tree in the EML section has many different options, visible in the schema. You can create new elements in the methods tree by following the schema and using the eml helpers. Another simple and potentially useful way to add methods to an EML that has no methods at all is by adding them via a MS Word document. An example is shown below: methods1 &lt;- set_methods(&#39;methods_doc.docx&#39;) doc$dataset$methods &lt;- methods1 If you want to make minor changes to existing methods information that has a lot of nested elements, your best bet may be to edit the EML manually in a text editor (or in RStudio), otherwise there is a risk of accidentally overwriting nested elements with blank object classes, therefore losing methods information. 4.12.1 Adding sampling info to methods section # add method steps as new variables step1 &lt;- eml$methodStep(description = &quot;text describing the methods used&quot;) stEx &lt;- eml$studyExtent(description = &quot;study extent description&quot;) samp &lt;- eml$sampling(studyExtent = stEx, samplingDescription = &quot;sampling description text&quot;) # combine all methods steps and sampling info methods1 &lt;- eml$methods(methodStep = step1, sampling = samp) doc$dataset$methods &lt;- methods1 4.13 Set parties To add people, with their addresses, you need to add addresses as their own object class, which you then add to the contact, creator, or associatedParty classes. NCEASadd &lt;- eml$address( deliveryPoint = &quot;735 State St #300&quot;, city = &quot;Santa Barbara&quot;, administrativeArea = &#39;CA&#39;, postalCode = &#39;93101&#39;) The creator, contact, and associatedParty classes can easily be created using functions from the arcticdatautils package. Here, we use eml_creator() to set our data set creator. JC_creator &lt;- arcticdatautils::eml_creator(given_names = &quot;Jeanette&quot;, sur_name = &quot;Clark&quot;, organization = &quot;NCEAS&quot;, email = &quot;jclark@nceas.ucsb.edu&quot;, phone = &quot;123-456-7890&quot;, userId = &quot;https://orcid.org/WWWW-XXXX-YYYY-ZZZZ&quot;, address = NCEASadd) doc$dataset$creator &lt;- JC_creator Similarly, we can set a single contact or multiple. In this case, there are two, so we set doc$dataset$contact as a list containing both of them. JC_contact &lt;- arcticdatautils::eml_contact(given_names = &quot;Jeanette&quot;, sur_name = &quot;Clark&quot;, organization = &quot;NCEAS&quot;, email = &quot;jclark@nceas.ucsb.edu&quot;, phone = &quot;123-456-7890&quot;, userId = &quot;https://orcid.org/WWWW-XXXX-YYYY-ZZZZ&quot;, address = NCEASadd) JG_contact &lt;- arcticdatautils::eml_contact(given_names = &quot;Jesse&quot;, sur_name = &quot;Goldstein&quot;, organization = &quot;NCEAS&quot;, email = &quot;jgoldstein@nceas.ucsb.edu&quot;, phone = &quot;123-456-7890&quot;, userId = &quot;https://orcid.org/WWWW-XXXX-YYYY-ZZZZ&quot;, address = NCEASadd) doc$dataset$contact &lt;- list(JC_contact, JG_contact) Finally, the associatedPartys are set. Note that associatedPartys MUST have a role defined, unlike creator or contact. JG_ap &lt;- arcticdatautils::eml_associated_party(given_names = &quot;Jesse&quot;, sur_name = &quot;Goldstein&quot;, organization = &quot;NCEAS&quot;, email = &quot;jgoldstein@nceas.ucsb.edu&quot;, phone = &quot;123-456-7890&quot;, address = NCEASadd, userId = &quot;https://orcid.org/WWWW-XXXX-YYYY-ZZZZ&quot;, role = &quot;metadataProvider&quot;) doc$dataset$associatedParty &lt;- JG_ap 4.14 Validate EML and update package To make sure that your edited EML is valid against the EML schema, run eml_validate() on your EML. Fix any errors that you see. eml_validate(doc) You should see something like if everything passes: &gt;[1] TRUE &gt;attr(,“errors”) &gt;character(0) Then save your EML to a path of your choice or a temp file. You will later pass this path as an argument to update the package. eml_path &lt;- &quot;path/to/save/eml.xml&quot; write_eml(doc, eml_path) To update a package with the newly edited EML, use arcticdatautils::publish_update(). This function has an argument for adding data PIDs (or otherwise including existing data PIDs) to make sure that they stay with the package. This function allows you to make metadata edits, as well as add or remove data objects (discussed in the following chapter). update &lt;- publish_update(adc_test, metadata_pid = pkg$metadata, resource_map_pid = pkg$resource_map, data_pids = pkg$data, metadata_path = eml_path, public = FALSE) Note that there are other arguments to publish_update() you may need. After your package is published, run the qa_package() function from the datamgmt package. The function arguments are as follows: qa_package &lt;- function(node, pid, readAllData = TRUE, check_attributes = TRUE, check_creators = FALSE, check_access = FALSE) By default, qa_package() checks for: Correctness of distribution URLs for each data object (URLs must match the EML physical section for the object) Congruence of metadata and data The check_creators and check_access flags can be set to TRUE to check: Correctness of ORCIDs of creators in a given EML Rights and access are set for creators in the system metadata In most cases, qa_package() will be run just by passing in a member node and the resource map PID. qa_package(mn, resource_map_pid) There is a bug in for qa_package() for datasets in test.arcticdata.io that should be ignored: The distribution URL for object urn:uuid:......(your resource map pid) is missing or incongruent in the physical section of the EML. Error in dl_and_read_all_data(mn, package, doc, read_all_data) : All distribution URLs for data objects must match the data PIDs to continue. 4.15 Exercise 3b Make sure you have everything from before in R. After adding more metadata, we want to publish the dataset onto test.arcticdata.io. Before we publish updates we need to do a couple checks before doing so. Validate your metadata using eml_validate. Use the checklist to review your submission. Make edits where necessary Once eml_validate returns TRUE go ahead and run write_eml and publish_update. There might be a small lag for your changes to appear on the website. "],["updating-a-data-package.html", "Chapter 5 Updating a data package 5.1 Update a data object 5.2 Update a package with a new data object 5.3 Exercise 4", " Chapter 5 Updating a data package This chapter will teach you how to edit and update an existing data package in R. Earlier, we updated metadata. In this section we will learn how to update a data file, and how to update a package by adding an additional data file. 5.1 Update a data object To update a data file, you need to do three things: update the object itself, update the metadata that describes that object, and update the resource map (which affiliates the object with the metadata). The arcticdatautils::update_object() function takes care of the first of these tasks. As arguments, update object takes the member node instance you are working in, the pid of the object to be updated, the path to the new version of that object on your computer, and the format id of the object. The code will look like this (very similar to the publish_object() function call): id_new &lt;- update_object(adc_test, pid = &quot;the data pid you need to update&quot;, path = &quot;path/to/new/file.csv&quot;, format_id = &quot;text/csv&quot;) You will need to be explicit about your format_id here based on the file type. A list of format IDs can be found here on the DataONE website. Use line 2 (Id:) exactly, character for character. To accomplish the second task, you will need to update the metadata using the EML package. This is covered in Chapter 4. After you update a file, you will always need to update the metadata because parts of the physical section (such as the file size, checksum) will be different, and it may also require different attribute information. Once you have updated your metadata and saved it, you can update the package itself. 5.2 Update a package with a new data object Once you have updated the data objects and saved the metadata to a file, we can update the metadata and add the new pid to the resource map using publish_update(). Make sure you have the package you want to update, loaded into R using get_package(). 5.2.1 Publish update Now we can update your data package to include the new data object. eml_path &lt;- &quot;path/to/your/saved/eml.xml&quot; pkg &lt;- get_package(adc_test, &quot;resource_map_pid&quot;) update &lt;- publish_update(adc_test, metadata_pid = pkg$metadata, resource_map_pid = pkg$resource_map, data_pids = c(pkg$data, id_new), # add new pid metadata_path = eml_path, public = FALSE) If you want to delete the existing old pid to be published and replace it with new pid, make sure you delete the existing pid from pkg$data and then combine id_new together as argument for data_pidsin the publish_update(). If a package is ready to be public, you can change the public argument in the publish_update() call to TRUE. If you want to publish with a DOI (Digital Object Identifier) instead of a UUID (Universally Unique Identifier), you can change the use_doi argument to TRUE. This should only be done after the package is finalized and has been thoroughly reviewed! If the package has children, set the child_pids argument to pkg$child_packages. Refresh the landing page at test.arcticdata.io/#view/… for this package and then follow the “newer version” link to view the latest. 5.3 Exercise 4 What if the researcher notices that some information needed to be updated in the data file? We can use update_object to do just that! If you haven’t already: Locate the data package you published in the previous exercise by navigating to the URL test.arcticdata.io/#view/… Load the package and EML into R using the above commands. Make a slightly different data file to upload to test.arcticdata.io for this exercise: Load the data file associated with the package into R as a data.frame. (Hint: use read.csv() to upload the data file from your computer/the server.) Make an edit to the data in R (e.g. change one of the colnames to &quot;TEST&quot;). Save the edited data. (Hint: use write.csv(data, row.names = FALSE).) Upload the new csv file, get a new pid and publish those updates: Update the data file in the package with the edited data file using update_object. Update your package using publish_update. "],["editing-system-metadata.html", "Chapter 6 Editing system metadata 6.1 Edit sysmeta 6.2 Set rights and access 6.3 Exercise 5", " Chapter 6 Editing system metadata Every object on the ADC (or the KNB) has “system metadata”. An object’s system metadata have information about the file itself, such as the name of the file (fileName), the format (formatId), who the rightsHolder is, what the accessPolicy is, and more. Sometimes we will need to edit system metadata in order to make sure that things on the webpage display correctly, or to ensure a file downloads from the website with the correct file name and extension. Although the majority of system metadata changes that need to be made are done automatically, sometimes we need to change aspects of the system metadata (or ‘sysmeta’ for short) manually. 6.1 Edit sysmeta To edit the sysmeta of an object (data file, EML, or resource map, etc.) with a PID, first load the sysmeta into R using the following command: sysmeta &lt;- getSystemMetadata(mn, pid) Then edit the sysmeta slots by using @ functionality. For example, to change the fileName use the following command: sysmeta@fileName &lt;- &#39;NewFileName.csv&#39; Note that some slots cannot be changed by simple text replace (particularly the accessPolicy). There are various helper functions for changing the accessPolicy and rightsHolder such as datapack::addAccessRule() (which takes the sysmeta as an input) or arcticdatautils::set_rights_and_access(), which only requires a PID. In general, you most frequently need to use dataone::getSystemMetadata() to change either the formatId or fileName slots (see the DataONE list of format ids) for acceptable formats. # Example of setting the formatId slot sysmeta@formatId &lt;- &quot;eml://ecoinformatics.org/eml-2.1.1&quot; After you have changed the necessary slot, you can update the system metadata using the following command: updateSystemMetadata(mn, pid, sysmeta) 6.1.1 Identifiers and sysmeta Importantly, changing the system metadata does NOT necessitate a change in the PID of an object. This is because changes to the system metadata do not change the object itself, they are only changing the description of the object (although ideally the system metadata are accurate when an object is first published). 6.1.2 Additional resources For a more in-depth (and technical) guide to sysmeta, check out the DataONE documentation: System Metadata Data Types in CICore 6.2 Set rights and access One final step when creating/updating packages is to make sure that the rights and access on all the objects that were uploaded are set correctly within the sysmeta. The function arcticdatautils::set_rights_and_access() will set both, and arcticdatautils::set_access() will just set access. There are two functions for this because a rightsHolder should always have access, but not all people who need access are rightsHolders. The rightsHolder of the data package is typically the submitter (if the data set is submitted through the web form (“editor”)), but if a data team member is publishing objects for a PI, the rightsHolder should be the main point of contact for the data set (i.e. the person who requested that we upload the data for them). To set the rights and access for all of the objects in a package, first get the ORCiD of the person to whom you are giving rights and access. You can set this manually, or grab it from one of the creators in an EML file. You can look up ORCID iDs here # Manually set ORCiD subject &lt;- &#39;http://orcid.org/PUT0-YOUR-ORCD-HERE&#39; # Set ORCiD from EML creator # if only 1 creator exists subject &lt;- doc$dataset$creator$userId$userId # if more than 1 creator exists and you want the first one subject &lt;- doc$dataset$creator[[1]]$userId$userId # As a convention we use `http:` instead of `https:` in our system metadata subject &lt;- sub(&quot;^https://&quot;, &quot;http://&quot;, subject) Note, when setting metadata, the ORCiD must start with http://. ORCiDs in EML should start with https://. The sub() command above will change this formatting for you. Next, set the rights and access using the following command: set_rights_and_access(adc_test, pids = c(pkg$metadata, pkg$data, pkg$resource_map), subject = subject, permissions = c(&#39;read&#39;,&#39;write&#39;,&#39;changePermission&#39;)) If you ever need to remove/add public access to your package or object, you can use remove_public_read() or set_public_read(), respectively. remove_public_read(adc_test, c(pkg$metadata, pkg$data, pkg$resource_map)) 6.2.1 My profile The datasets that render under a user’s profile page like here are added if one of the following three System Metadata fields exists. The subject is the rightsHolder or the subject has one of either write or changePermission in the accessPolicy. If you ever need to remove a subject from the accessPolicy or update the rightsHolder you can use arcticdatautils::remove_access and arcticdatautils::set_rightsHolder, respectively. 6.3 Exercise 5 Sometimes the system doesn’t recognize the file types properly. For example you have a csv file but the File type on the website says Microsoft Excel Read the system metadata in from the data file you uploaded previously. Check to make sure the fileName and formatId are set correctly (the extension in fileName should match the formatId). Update the system metadata if necessary. Finally make sure that the researcher has permission to edit and view the dataset. In this case use your own ORCiD. Set the rights and access for all objects with your ORCiD. "],["building-provenance.html", "Chapter 7 Building provenance 7.1 Using the prov editor 7.2 Understanding resource maps 7.3 Using the datapack package 7.4 References", " Chapter 7 Building provenance Note - It is rare for a dataset to have provenance - though we would like to see that change by encouraging researchers to submit scripts whenever it is reasonable. When processing datasets if you notice that provenance is needed let Jasmine or Jeanette know. The provenance chain describes the origin and processing history of data. Provenance (or “prov”) can exist on a continuum, ranging from prose descriptions of the history, to formal provenance traces, to fully executable environments. In this section we will describe how to build provenance using formal provenance traces in DataONE. Provenance is becoming increasingly important in the face of what is being called a reproducibility crisis in science. J. P. A. Ioannidis (2005) wrote that “Most Research Findings Are False for Most Research Designs and for Most Fields”. Ioannidis outlined ways in which the research process has lead to inflated effect sizes and hypothesis tests that codify existing biases. The first step towards addressing these issues is to be able to evaluate the data, analyses, and models on which conclusions are drawn. Under current practice, this can be difficult because data are typically unavailable, the method sections of papers do not detail the computational approaches used, and analyses and models are often conducted in graphical programs, or, when scripted analyses are employed, the code is not available. And yet, this is easily remedied. Researchers can achieve computational reproducibility through open science approaches, including straightforward steps for archiving data and code openly along with the scientific workflows describing the provenance of scientific results (e.g., Hampton et al. (2015), Munafò et al. (2017)). At NCEAS and in the datateam, not only do we archive data and code openly, but we also describe the workflows that involve that data and code using provenance, formalizing the provenance trace for a workflow that might look like this into an easily understandable trace including archived data objects, such as what is shown here. There are two ways that we add provenance in the datateam - the prov editor and the R datapack package. 7.1 Using the prov editor Provenance can easily be added to production Arctic Data Center packages using the provenance editor on the Arctic Data Center. On the landing page of a data package within beta, in the dataTable or otherEntity section where you would like to add a provenance relationship, you can choose to add either a “source” or a “derivation”, to the left or right of the object pane, respectively. To add a source data file, click on the circle with the “+ add” text. Similarly, a source script would be added by selecting the arrow. Selecting the circle to add a source file pulls up the following screen, where you can select the source from other data objects within the same data package. A data package with an object that has multiple sources added will look like this. For simple packages on the Arctic Data Center, adding prov through the prov editor is super easy! 7.2 Understanding resource maps Before we dive further into constructing prov in R, we need to talk more about resource maps (or “resmaps”). All data packages have a single resource map. But what is a resource map and how do we use one to find out what objects are in a particular data package? This document is a short introduction but a more complete guide can be found here. A resource map is a special kind of XML document that describes (among other things) an “aggregation”. The aggregation describes the members of a data package (metadata and data, usually). We can use the dataone R package to download a resource map if we know its PID: library(dataone) adc_test &lt;- MNode(&quot;https://test.arcticdata.io/metacat/d1/mn/v2&quot;) pid &lt;- &quot;urn:uuid:82bd7d7f-9e18-4fd2-8bda-99b1fddab556&quot; # A resource map PID path &lt;- tempfile(fileext = &quot;.xml&quot;) # We&#39;re saving to a temporary file but you can save elsewhere writeLines(rawToChar(getObject(adc_test, pid)), path) # Write the object to `path` If we open that file up in a text editor, we see this: &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;rdf:RDF xmlns:cito=&quot;http://purl.org/spar/cito/&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dcterms=&quot;http://purl.org/dc/terms/&quot; xmlns:foaf=&quot;http://xmlns.com/foaf/0.1/&quot; xmlns:ore=&quot;http://www.openarchives.org/ore/terms/&quot; xmlns:prov=&quot;http://www.w3.org/ns/prov#&quot; xmlns:provone=&quot;http://purl.dataone.org/provone/2015/01/15/ontology#&quot; xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; xmlns:rdfs=&quot;http://www.w3.org/2000/01/rdf-schema#&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema#&quot;&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A61b48e72-ea29-4ba5-8131-4f59a9ebcd27&quot;&gt; &lt;cito:isDocumentedBy rdf:resource=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Ac59b7505-39e6-4def-bc82-b67a8d117ce5&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556#aggregation&quot;&gt; &lt;rdf:type rdf:resource=&quot;http://www.openarchives.org/ore/terms/Aggregation&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Ac59b7505-39e6-4def-bc82-b67a8d117ce5&quot;&gt; &lt;cito:isDocumentedBy rdf:resource=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Ac59b7505-39e6-4def-bc82-b67a8d117ce5&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Ac59b7505-39e6-4def-bc82-b67a8d117ce5&quot;&gt; &lt;cito:documents rdf:resource=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A61b48e72-ea29-4ba5-8131-4f59a9ebcd27&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Ac59b7505-39e6-4def-bc82-b67a8d117ce5&quot;&gt; &lt;cito:documents rdf:resource=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Ac59b7505-39e6-4def-bc82-b67a8d117ce5&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A61b48e72-ea29-4ba5-8131-4f59a9ebcd27&quot;&gt; &lt;ore:isAggregatedBy rdf:resource=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556#aggregation&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556#aggregation&quot;&gt; &lt;dc:title&gt;DataONE Aggregation&lt;/dc:title&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556&quot;&gt; &lt;dcterms:identifier rdf:datatype=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:uuid:82bd7d7f-9e18-4fd2-8bda-99b1fddab556&lt;/dcterms:identifier&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556&quot;&gt; &lt;ore:describes rdf:resource=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556#aggregation&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Ac59b7505-39e6-4def-bc82-b67a8d117ce5&quot;&gt; &lt;ore:isAggregatedBy rdf:resource=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556#aggregation&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556#aggregation&quot;&gt; &lt;ore:aggregates rdf:resource=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A61b48e72-ea29-4ba5-8131-4f59a9ebcd27&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556#aggregation&quot;&gt; &lt;ore:aggregates rdf:resource=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Ac59b7505-39e6-4def-bc82-b67a8d117ce5&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556&quot;&gt; &lt;rdf:type rdf:resource=&quot;http://www.openarchives.org/ore/terms/ResourceMap&quot;/&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A61b48e72-ea29-4ba5-8131-4f59a9ebcd27&quot;&gt; &lt;dcterms:identifier rdf:datatype=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:uuid:61b48e72-ea29-4ba5-8131-4f59a9ebcd27&lt;/dcterms:identifier&gt; &lt;/rdf:Description&gt; &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Ac59b7505-39e6-4def-bc82-b67a8d117ce5&quot;&gt; &lt;dcterms:identifier rdf:datatype=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:uuid:c59b7505-39e6-4def-bc82-b67a8d117ce5&lt;/dcterms:identifier&gt; &lt;/rdf:Description&gt; &lt;/rdf:RDF&gt; Whoa! What is this thing and how do you read it to find the members of the data package? The short answer is to look for lines like this: &lt;rdf:Description rdf:about=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3A82bd7d7f-9e18-4fd2-8bda-99b1fddab556#aggregation&quot;&gt; &lt;ore:aggregates rdf:resource=&quot;https://cn.dataone.org/cn/v2/resolve/urn%3Auuid%3Ac59b7505-39e6-4def-bc82-b67a8d117ce5&quot;/&gt; This line says “The aggregation aggregates urn:uuid:c59b7505-39e6-4def-bc82-b67a8d117ce5” so that means urn:uuid:c59b7505-39e6-4def-bc82-b67a8d117ce5 is in our data package! The key bit is the &lt;rdf:Description rdf:about=&quot;...#aggregation part. If you look for another similar statement, you’ll also see that urn:uuid:61b48e72-ea29-4ba5-8131-4f59a9ebcd27 is part of our data package. Now we know which objects are in our data package but we don’t know which one contains metadata and which one contains data. For that, we need to get a copy of the system metadata for each object: getSystemMetadata(adc_test, &quot;urn:uuid:c59b7505-39e6-4def-bc82-b67a8d117ce5&quot;)@formatId getSystemMetadata(adc_test, &quot;urn:uuid:61b48e72-ea29-4ba5-8131-4f59a9ebcd27&quot;)@formatId From the formatIds, we can see the first PID is the EML (formatId: [1]&quot;eml://ecoinformatics.org/eml-2.1.1&quot;) and the second PID is a data object (formatId: [1]&quot;application/octet-stream&quot;). Now we know enough to know what’s in the data package: Resource map: urn:uuid:82bd7d7f-9e18-4fd2-8bda-99b1fddab556 Metadata: urn:uuid:c59b7505-39e6-4def-bc82-b67a8d117ce5 Data: urn:uuid:61b48e72-ea29-4ba5-8131-4f59a9ebcd27 Now that you’ve actually seen a resource map, we can dive further into prov. 7.3 Using the datapack package For packages not on the ADC, or packages that are extremely complicated, it may be best to upload prov relationships using R. The datapack package has several functions which help add relationships in a very simple way. These relationships are stored in the resource map. When you update a package to only add prov, the package will not be assigned any new identifiers with the exception of the resource map. First, we set the environment, in a similar, but slightly different way than what you may be used to. Here the function D1Client() sets the DataONE client with the coordinating node instance as the first argument, and member node as the second argument. library(dataone) library(datapack) d1c &lt;- D1Client(&quot;STAGING2&quot;, &quot;urn:node:mnTestKNB&quot;) Next, get the PID of the resource map of the data package you are adding prov to, and load that package into R using the getDataPackage() function. resmapId &lt;- &quot;urn:uuid:8f501606-2c13-4454-b22d-050a4176a97b&quot; pkg &lt;- getDataPackage(d1c, id=resmapId, lazyLoad=TRUE, limit=&quot;0MB&quot;, quiet=FALSE) Printing pkg in your console shows you the contents of the data package, including all of the objects and their names: &gt; pkg Members: filename format mediaType size identifier modified local esc...er.R application/R NA 888 knb.92049.1 n n PWS....csv text/csv NA 1871469 knb.92050.1 n n PWS....csv text/csv NA 1508128 knb.92051.1 n n NA eml:/...-2.1.1 NA 15658 urn:uuid:8f501606-2c13-4454-b22d-050a4176a97b n y Package identifier: resource_map_urn:uuid:8f501606-2c13-4454-b22d-050a4176a97b RightsHolder: http://orcid.org/0000-0002-2192-403X It will also show the existing relationships in the resource map, which in this case are mostly the “documents” relationships that specify that the metadata record is describing all of these data files. Relationships: subject predicate object 2 esc_reformatting_PWSweirTower.R cito:isDocumentedBy urn:uuid:8f501606-...4-b22d-050a4176a97b 4 PWS_weirTower.csv cito:isDocumentedBy urn:uuid:8f501606-...4-b22d-050a4176a97b 1 PWS_Weir_Tower_export.csv cito:isDocumentedBy urn:uuid:8f501606-...4-b22d-050a4176a97b 3 urn:uuid:8f501606-...4-b22d-050a4176a97b dcterms:creator _r1515542097r415842r1 5 urn:uuid:8f501606-...4-b22d-050a4176a97b cito:documents esc_reformatting_PWSweirTower.R 6 urn:uuid:8f501606-...4-b22d-050a4176a97b cito:documents PWS_weirTower.csv 7 urn:uuid:8f501606-...4-b22d-050a4176a97b cito:documents PWS_Weir_Tower_export.csv 8 urn:uuid:8f501606-...4-b22d-050a4176a97b cito:documents urn:uuid:8f501606-...4-b22d-050a4176a97b 9 urn:uuid:8f501606-...4-b22d-050a4176a97b cito:isDocumentedBy urn:uuid:8f501606-...4-b22d-050a4176a97b In this example above, the data package has two .csv files, with an R script that converts one to the other. To create our provenance trace, first we need to select the source object, and save the PID to a variable. We do this using the selectMember() function, and we can query part of the system metadata to select the file that we want. This function takes the data package (pkg), the name of the sysmeta field to query (in this case we use the fileName), and the value that you want to match that field to (in this case, ‘PWS_Weir_Tower_export.csv’). sourceObjId &lt;- selectMember(pkg, name=&quot;sysmeta@fileName&quot;, value=&#39;PWS_Weir_Tower_export.csv&#39;) This returns a list of the source object PIDs that match the query (in this case only one object matches). &gt; sourceObjId [1] &quot;knb.92051.1&quot; Now we need to select our output object. Here, we use the selectMember() function again, and save the result to a new variable. outputObjId &lt;- selectMember(pkg, name=&quot;sysmeta@fileName&quot;, value=&#39;PWS_weirTower.csv&#39;) Now we query for the R script. In this case, we query based on the value of the formatId as opposed to the fileName. This can be useful if you wish to select a large list of PIDs that are all similar. programObjId &lt;- selectMember(pkg, name=&quot;sysmeta@formatId&quot;, value=&quot;application/R&quot;) Next, you use these lists of PIDs and a function called describeWorkflow() to add these relationships to the data package. Note that if you do not have a program in the workflow, or a source file, you can simply leave those arguments blank. pkg &lt;- describeWorkflow(pkg, sources=sourceObjId, program=programObjId, derivations=outputObjId) Viewing pkg again confirms that these relationships have been inserted into the data package, as shown by the wasDerivedFrom and wasGeneratedBy statements. It is always a good idea to print pkg to confirm that your PID selection process worked as expected, and your prov relationships make sense. Relationships (updated): subject predicate object 15 _1db49d06-ae98-4...9101-39f7c0b45a95 rdf:type prov:Association 14 _1db49d06-ae98-4...9101-39f7c0b45a95 prov:hadPlan esc_reformatting_PWSweirTower.R 1 esc_reformatting_PWSweirTower.R cito:isDocumentedBy urn:uuid:8f50160...b22d-050a4176a97b 16 esc_reformatting_PWSweirTower.R rdf:type provone:Program 8 PWS_weirTower.csv cito:isDocumentedBy urn:uuid:8f50160...b22d-050a4176a97b 11 PWS_weirTower.csv rdf:type provone:Data 20 PWS_weirTower.csv prov:wasDerivedFrom PWS_Weir_Tower_export.csv 19 PWS_weirTower.csv prov:wasGeneratedBy urn:uuid:3dd59b0...bc38-3b5d8fa644ac 6 PWS_Weir_Tower_export.csv cito:isDocumentedBy urn:uuid:8f50160...b22d-050a4176a97b 10 PWS_Weir_Tower_export.csv rdf:type provone:Data 9 _r1515544826r415842r1 foaf:name DataONE R Client 17 urn:uuid:3dd59b0...bc38-3b5d8fa644ac dcterms:identifier urn:uuid:3dd59b0...bc38-3b5d8fa644ac 13 urn:uuid:3dd59b0...bc38-3b5d8fa644ac rdf:type provone:Execution 12 urn:uuid:3dd59b0...bc38-3b5d8fa644ac prov:qualifiedAssociation _1db49d06-ae98-4...9101-39f7c0b45a95 18 urn:uuid:3dd59b0...bc38-3b5d8fa644ac prov:used PWS_Weir_Tower_export.csv 5 urn:uuid:8f50160...b22d-050a4176a97b cito:documents esc_reformatting_PWSweirTower.R 4 urn:uuid:8f50160...b22d-050a4176a97b cito:documents PWS_weirTower.csv 3 urn:uuid:8f50160...b22d-050a4176a97b cito:documents PWS_Weir_Tower_export.csv 2 urn:uuid:8f50160...b22d-050a4176a97b cito:documents urn:uuid:8f50160...b22d-050a4176a97b 7 urn:uuid:8f50160...b22d-050a4176a97b cito:isDocumentedBy urn:uuid:8f50160...b22d-050a4176a97b Finally, you can upload the data package using the uploadDataPackage() function, which takes the DataONE client d1c we set in the beginning, the updated pkg variable, some options for public read, and whether or not informational messages are printed during the upload process. First, you will need to run a token obtained from https://dev.nceas.ucsb.edu/ to publish to that node. resmapId_new &lt;- uploadDataPackage(d1c, pkg, public = TRUE, quiet = FALSE) If successful you should be able to navigate to the landing page of your dataset, and icons should show up where the sources and derivations are, such as in this example: 7.3.1 Fixing mistakes If you messed up updating a data package using datapack, there unfortunately isn’t a great way to undo your work, as the describeWorkflow() only adds prov relationships, it does not replace them. If you messed up, the best course of action is to update the resource map with a clean version that does not have prov using update_resource_map(), and then go through the steps outlined above again. Note: this has not been thoroughly tested, and more extreme actions may be necessary to fully nuke the prov relationships. Consult Peter or Jeanette if things do not work as expected. 7.4 References Ioannidis, John P A. 2005. “Why Most Published Research Findings Are False.” PLoS Medicine 2 (8): e124. https://doi.org/10.1371/journal.pmed.0020124. Hampton, Stephanie E, Sean Anderson, Sarah C Bagby, Corinna Gries, Xueying Han, Edmund Hart, Matthew B Jones, et al. 2015. “The Tao of Open Science for Ecology.” Ecosphere 6 (July). https://doi.org/10.1890/ES14-00402.1. Munafò, Marcus R., Brian A. Nosek, Dorothy V. M. Bishop, Katherine S. Button, Christopher D. Chambers, Nathalie Percie du Sert, Uri Simonsohn, Eric-Jan Wagenmakers, Jennifer J. Ware, and John P. A. Ioannidis. 2017. “A Manifesto for Reproducible Science.” Nature Human Behaviour 1 (1): 0021. https://doi.org/10.1038/s41562-016-0021. "],["using-git.html", "Chapter 8 Using Git 8.1 Usage in the datateam 8.2 What is Git? 8.3 Setting up Git 8.4 Working with the repository 8.5 My Git tab disappeared", " Chapter 8 Using Git 8.1 Usage in the datateam We use git and Github to manage our packages (ie datamgmt, arcticdatautils) and even this document! 8.2 What is Git? Git is a distributed version control system. Important! If you have never used Git before, or only used it a little, or have no idea what it is, check out this intro to Git put together by the ecodatascience group at UCSB. Don’t worry too much about the forking and branching sections, as we will primarily be using the basic commit-pull-push commands. After you have read through that presentation, come back to this chapter. 8.2.1 So why do I need to use this again? There are several reasons why using the arctic-data GitHub repository is helpful, both for you and for the rest of the data team. Here are a few: Versioning: Did you accidentally make a change to your code and can’t figure out why it broke? Do you wish you could go back to the version that worked? If you add your code to the GitHub repo you can do this! Reproducibility: Being able to reproduce how you accomplished something is incredibly important. We should be able to tell anyone exactly how data have been reformatted, how metadata have been altered, and how packages have been created. As a data center, this is especially important for us with data team members that stay for 6-12 months because we may need to go back and figure out how something was done after the intern or fellow who wrote the code left the team. Troubleshooting: If you are building a particularly complicated EML, or doing some other advanced task, it is much easier for others to help you troubleshoot your code if it is on the GitHub repo. We can view, troubleshoot, and fix bugs very easily when code is on the GitHub repo, with the added bonus of being able to go back a version if something should break. Solve future problems: Some of the issues we see in ADC submissions come up over and over again. When all of our code is on GitHub, we can easily reference code built for other submissions, instead of trying to solve the same problems over and over again from scratch. 8.3 Setting up Git Now you need to set up your Git global options, and tell it who you are. At the top of your RStudio window, select Tools &gt; Shell. In the prompt, you will need to run two commands, one at a time. The first tells Git what your name is, the second what your email address is. These are the commands: git config --global user.name &quot;My Name&quot; git config --global user.email myemail@domain.com After running these commands, the shell prompt should look like this: 8.3.1 Cloning the arctic-data repo Next, you need to clone the arctic-data repository to your RStudio. You do this by adding it as a “project”. In your RStudio window, click File &gt; New Project. Then click ‘Version Control’, and then select the ‘Git’ option. If you are prompted to save your workspace during this process, make sure all of your work is saved, and you don’t need anything in your environment, and then click ‘Don’t Save’. You should see a prompt asking you for a URL. Fill it out as shown in the image below to clone the arctic-data repository into the top level of your home directory. Note that the URL is the same URL you use to view the repository on the web. If you are using the sasap-data repository, the URL is http://github.nceas.ucsb.edu/NCEAS/sasap-data/. You will be prompted for your username and password, and then Git will clone the directory. The username/password you use should be the enterprise account you use to log in when you go to http://github.nceas.ucsb.edu/KNB/arctic-data or RT. Now you should have a directory called arctic-data in your RStudio files window. 8.4 Working with the repository 8.4.1 Adding a new script If you have been working on a script that you want to put in the arctic-data GitHub repo, you first need to save it somewhere in the arctic-data folder you cloned to your account on the Datateam server. You can do this by either moving your script into the folder or using the save-as functionality. Note that Git will try and version anything that you save in this folder, so you should be careful about what you save here. For our purposes, things that probably shouldn’t be saved in this folder include: Tokens: Any token file or script with a token in it should NOT be saved in the repository. Others could steal your login credentials if you put a token in GitHub. Data files: Git does not version data files very well. You shouldn’t save any .csv files or any other data files (including metadata). Workspaces/.RData: If you are in the habit of saving your R workspace, you shouldn’t save it in this directory. Plots/Graphics: For the same reasons as data files. Note: Do not EVER make a commit that you don’t understand. If something unexpected (like a file you have never worked on) shows up in your Git tab, ask for help before committing. After you save your script in the appropriate place within the arctic-data folder, it will show up in your Git tab looking like this: Before you commit your changes, you need to click the little box under “Staged”. Do not stage or commit any .Rproj file. After clicking the box for your file, click “Commit” to commit your changes. In the window that pops up (you may need to force the browser to allow pop-ups), write your commit message. Always include a commit message. Remember that the commit message should be a concise description of the changes that were made to a file. Your window should look like this: Push ‘Commit’, and your commit will be saved to your local repository (this will not push it to the remote repository, yet). Now you want to merge the commits you made with the master version of the remote repository. You do this by using the command “Push.” But before you push, you always need to pull first to avoid merge conflicts. Pulling will merge the current version of the remote repository with your local repository, on your local machine. Click “Pull” and type in your credentials. Then, assuming you don’t have a merge conflict, you can push your changes by clicking “Push”. Always remember, the order is commit-pull-push. 8.4.2 Editing a script If you want to change a script, the workflow is the same. Just open the script that was saved in the arctic-data folder on your server account, make your changes, save the changes, stage them by clicking the box, commit, pull, then push to merge your version with the main version on the website. Do NOT edit scripts using the GitHub website. It is much easier to accidentally overwrite the history of a file this way. One thing you might be wondering as you are working on a script is, how often should I be committing my changes? It might not make sense to commit-pull-push after every single tiny change - if only because it would slow you way down. Personally, I commit every time I feel that a significant change has happened and that the chunk of code I was working on is “done”. Sometimes this is an entire script, other times it is just a few lines within a script. A good sign that you are committing too infrequently might be if many of your commit messages address a wide variety of coding tasks, such as: “wrote for loop to create referenced attribute lists for tables 1:20. also created nesting structure for this package with another package. also created attribute list for data table 40”. One final note, you can make multiple commits before you push to the repo. If you are making lots of changes to the script, you might want to make several commits before pull-push. You can see how many commits you are ahead of the “origin/master” branch (i.e. what you see on the website) by looking for text in your Git tab in RStudio that looks like this: 8.4.3 Where do I commit? The default right now is to save data-processing scripts in the arctic-data/datateam/data-processing/ directory, with sub-folders listed by project. Directories can be created as needed but please ask Dom or Jesse first so we can try and maintain some semblance of order in the file structure. The Github workflow diagram from stamminator shows each step and their functions explicitly. 8.5 My Git tab disappeared Sometimes R will crash so hard it loses your project information, causing your Git tab to disappear. Most likely, RStudio has just closed your “project” and all you need to do is reopen it. If your Git tab has disappeared, in the top right of your RStudio session, you should see a little R logo with “Project: (None)” next to it. This means you do not currently have a project open. Clicking the arrow should give you a dropdown menu of recent projects, where you can select “arctic-data” or “sasap-data.” Once you have opened your project, the Git tab should reappear! This is also a convenient way to switch between projects if you are working in multiple repositories. "],["first-ticket.html", "Chapter 9 First Ticket 9.1 Navigate RT 9.2 Initial review checklist 9.3 Processing templates 9.4 Final Checklist 9.5 Email templates 9.6 Categorize datasets 9.7 Congrats!", " Chapter 9 First Ticket After completing the previous chapters, Jasmine or Jeanette will assign a ticket from RT. Login using your LDAP credentials got get familiarized with RT. 9.1 Navigate RT The RT ticketing system is how we communicate with folks interacting with the Arctic Data Center. We use it for managing submissions, accessing issues, etc. It consists of three separate interfaces: Front Page All Tickets Ticket Page 9.1.1 Front page This is what you see first Home - brings you to this homepage Tickets - to search for tickets (also see number 5) Tools - not needed New Ticket - create a new ticket Search - Type in the ticket number to quickly navigate to a ticket Queue - Lists all of the tickets currently in a particular queue (such as ‘arcticdata’) and their statuses New = unopened tickets that require attention Open = tickets currently open and under investigation and/or being processed by a support team member Stalled = tickets awaiting responses from the PI/ submitter Tickets I Own - These are the current open tickets that are claimed by me Unowned Tickets - Newest tickets awaiting claim Ticket Status - Status and how long ago it was created Take - claim the ticket as yours 9.1.2 All tickets This is the queue interface from number 6 of the Front page 1. Ticket number and title 2. Ticket status 3. Owner - who has claimed the ticket 9.1.3 Example ticket Title - Include the PI’s name for reference Display - homepage of the ticket History - Comment/Email history, see bottom of Display page Basics - edit the title, status, and ownership here People - option to add more people to the watch list for a given ticket conversation. Note that user/ PI/ submitter email addresses should be listed as “Requestors”. Requestors are only emailed on “Replys”, not “Comments”. Ensure your ticket has a Requestor before attempting to contact users/ PIs/ submitters Links - option to “Merge into” another ticket number if this is part of a larger conversation. Also option to add a reference to another ticket number Verify that this is indeed the two tickets you want to merge. It is non-reversible. Actions Reply - message the submitter/ PI/ all watchers Comment - attach internal message (no submitters, only Data Teamers) Open It - Open the ticket Stall - submitter has not responded in greater than 1 month Resolve - ticket completed History - message history and option to reply (to submitter and beyond) or comment (internal message) 9.1.4 New data submission When notified by Arcticbot about a new data submission, here are the typical steps: Update the Requestor under the People section based on the email given in the submission (usually the user/ PI/ submitter). You may have to google for the e-mail address if the PI did not include it in the metadata record. Take the ticket (Actions &gt; Take) Review the submission based on the checklist Draft an email using the template and let others review it via Slack Send your reply via Actions Before opening a R script first look over the initial checklist first to identify what you will need to update in the metadata. 9.2 Initial review checklist Before responding to a new submission use this checklist to review the submission. When your are ready to respond use the initial email template and insert comments and modify as needed. Social Science Data Any dataset involving human subjects (may include awards awarded by ASSP, topics such as COVID-19) Check if there is any sensitive information or personal identifying information in the data (eg. Names) Can the data be disaggregated and de-anonymized? (eg. a small sample size and individuals could be easily identified by their answers) Check for citations If the dataset appears to be in a publication please (might be in the abstract) Make sure that those citations are registered at the ADC Title WHAT, WHERE, and WHEN: Is descriptive of the work (provides enough information to understand the contents at a general scientific level), AND includes temporal coverage Provides a location of the work from the local to state or country level Provides a time frame of the work NO UNDEFINED ACRONYMS, ABBREVIATIONS, nor INITIALISMS unless approved of as being more widely-known in that form than spelled out Abstract Describes the DATA as well as: The motivation (purpose) of the study Where and when the research took place At least one sentence summarizing general methodologies NO UNDEFINED ACRONYMS, ABBREVIATIONS, nor INITIALISMS unless approved of as being more widely-known in that form than spelled out At least 100 words total tags such as &lt;superscript&gt;2&lt;/superscript&gt; and &lt;subscript&gt;2&lt;/subscript&gt; can be used for nicer formatting Any citations to papers can be registered with us Keywords Some keywords are included Data Data is normalized (if not suggest to convert the data if possible) At least one data file, or an identifier to the files at another approved archive, unless funded by ASSP (Arctic Social Sciences Program) No xls/xlsx files (or other proprietary files) File contents and relationships among files are clear Each file is well NAMED and DESCRIBED and clearly differentiated from all others All attributes in EML match attribute names in respective data files EXACTLY, are clearly defined, have appropriate units, and are in the same order as in the file. Quality control all dimensionless units. Missing value codes are explained (WHY are the data absent?) If it is a .rar file scan the file If there is the unit tons make sure to ask if it is metric tons or imperical tons if not clarified already People &amp; Parties At least one contact and one creator with a name, email address, and ORCID iD Coverages Includes coverages that make sense Temporal coverage - Start date BEFORE end date Geologic time scales are added if mentioned in metadata (e.g. 8 Million Years or a name of a time period like Jurassic) Spatial coverage matches geographic description (check hemispheres) Geographic description is from the local to state or country level, at the least Taxonomic coverage if appropriate Project Information At least one FUNDING number Title, personnel, and abstract match information from the AWARD (not from the data package) Methods This section is REQUIRED for ALL NSF-FUNDED data packages Enough detail is provided such that a reasonable scientist could interpret the study and data for reuse without needing to consult the researchers, nor any other resources Portals If there are multiple submissions from the same people/project let them know about the portals feature If this is part of a portal make sure this dataset can be found there. Additional steps might be needed to get that to work. Please consult Jeanette or Jasmine for more information on how to do that. 9.3 Processing templates We have developed some partially filled R scripts to get you started on working on your first dataset. They outline common functions used in processing a dataset. However, it will differ depending on the dataset. You can use this template where you can fill in the blanks to get familiar with the functions we use and workflow at first. We also have a more minimal example A filled example as a intermediate step. You can look at the filled example if you get stuck or message the #datateam. Once you have updated the dataset to your satisfaction and reviewed the Final Checklist, post the link to the dataset on #datateam for peer review. 9.4 Final Checklist You can click on the assessment report on the website to for a general check. Fix anything you see there. Send the link over slack for peer review by your fellow datateam members. Usually we look for the following (the list is not exhaustive): 9.4.1 System Metadata the format ids are correct 9.4.2 General EML Included lines for FAIR: doc &lt;- eml_add_publisher(doc) doc &lt;- eml_add_entity_system(doc) 9.4.3 Title No abbreviations, should include geographic and temporal coverage 9.4.4 Abstract longer than 100 words no abbreviations or garbled text tags such as &lt;superscript&gt;2&lt;/superscript&gt; and &lt;subscript&gt;2&lt;/subscript&gt; can be used for nicer formatting 9.4.5 DataTable / OtherEntity / SpatialVectors in the correct one: DataTable / OtherEntity / SpatialVector / SpatialRaster for the file type entityDescription - longer than 5 words and unique physical present and format correct 9.4.5.1 Attribute Table complete attributeDefinitions longer than 3 words Variables match what is in the file Measurement domain - if appropirate (ie dateTime correct) Missing Value Code - accounted for if applicable Semantic Annotation - appropriate semantic annotations added, especially for spatial and temporal variables: lat, lon, date etc. 9.4.6 People complete information for each person in each section including ORCID and e-mail address for all contacts people repeated across sections should have consistent information 9.4.7 Geographic region the map looks correctand matches the geographic description check if negatives (-) are missing 9.4.8 Project if it is an NSF award you can use the helper function: doc$dataset$project &lt;- eml_nsf_to_project(awards) for other awards that need to be set manually, see the set project page 9.4.9 Methods present no garbled text 9.4.10 Check EML Version currently using: eml-2.2.0 (as of July 30 2020) review to see if the EML version is set correctly by reviewing the doc$`@context` that it is indeed 2.2.0 under eml Re-run your code again and have the lineemld::eml_version(&quot;eml-2.2.0&quot;) at the top 9.4.11 Access Granted access to PI using set_rights_and_access() make sure it is http:// (no s) note if it is a part of portals there might be specific access requirements for it to be visible using set_access() 9.4.12 SFTP Files if there are files transferred to us via SFTP, delete those files when the ticket is resolved After all the revisions send the link to the PI in an email through RT. Send the draft of the email to Jasmine or Jeanette on Slack. 9.5 Email templates Please think critically when using these canned replies rather than just blindly sending them. Typically, content should be adjusted/ customized for each response to be as relevant, complete, and precise as possible. In your first few months, please run email drafts by the #datateam Slack and get approval before sending. Remember to consult the submission guidelines for details of what is expected. Quick reference: Initial email template Final email templates Additional email template 9.5.1 Initial email template Hello [NAME OF REQUESTOR], Thank you for your recent submission to the NSF Arctic Data Center! From my preliminary examination of your submission I have noticed a few items that I would like to bring to your attention. We are here to help you publish your submission, but your continued assistance is needed to do so. See comments below: [COMMENTS HERE] After we receive your responses, we can make the edits on your behalf, or you are welcome to make them yourself using our user interface. Best, [YOUR NAME] 9.5.2 Comment templates based on what is missing 9.5.2.1 Portals Multiple datasets under the same project - suggest data portal feature I would like to highlight the Data Portals feature that would enhance the ability of your datasets to be discovered together. It also enables some custom branding for the group or project. Here is an example page that we created for the Distributed Biological Observatory: https://arcticdata.io/catalog/portals/DBO. We highly suggest considering creating a portal for your datasets, you can get one started here: https://arcticdata.io/catalog/edit/portals/new/Settings. More information on how to set up can be found here: https://arcticdata.io/data-portals/. If they ask to nest the dataset We are no longer supporting new nested datasets. We recommend to create a data portal instead. Portals will allow more control and has the same functionality as a nested dataset. You can get one started here: https://arcticdata.io/catalog/edit/portals/new/Settings. More information on how to set up can be found here: https://arcticdata.io/data-portals/, but as always we are here to help over email. 9.5.2.2 Dataset citations If there is a publication associated with this dataset, we would appreciate it if you could register the DOI of your published paper with us by using the Citations button right below the title at the dataset landing page. We are working to build our catalog of dataset citations in the Arctic Data Center. 9.5.2.3 Title Provides the what, where, and when of the data We would like to add some more context to your data package title. I would like to suggest: ‘OUR SUGGESTION HERE, WHERE, WHEN’. Does not use acronyms We wanted to clarify a couple of abbreviations. Could you help us in defining some of these: [LIST OF ACRONYMS TO DEFINE HERE] 9.5.2.4 Abstract Describes DATA in package (ideally &gt; 100 words) We would like to add some additional context to your abstract. We hope to add the following: [ADJUST THE DEPENDING ON WHAT IS MISSING] - The motivation of the study - Where and when the research took place - At least one sentence summarizing general methodologies - All acronyms are defined - At least 100 words long Offer this if submitter is reluctant to change: If you prefer and it is appropriate, we could add language from the abstract in the NSF Award found here: [NSF AWARD URL]. 9.5.2.5 Keywords We noticed that there were not keywords for this dataset. Adding keywords will help your dataset be discovered by others. 9.5.2.6 Data Sensitive Data Example response. Tailor this reponse to the format in question. We wanted to check with you to make sure there is no sensitive data that could potentially be de-anonymized (eg. would there be small enough populations where the data could be disaggregated). Adding provenance Is the [mention the file names here] files related? If so we can add provenance to show the relationship between the files. Here is an example of how that is displayed: https://arcticdata.io/catalog/view/doi%3A10.18739%2FA2WS8HM6C#urn%3Auuid%3Af00c4d71-0242-4e9d-9745-8999776fa2f2 At least one data file We noticed that no data files were submitted. With the exception of sensitive social science data, we seek to include all data products prior to publication. We wanted to check if additional files will be submitted before we move forward with the submission process. Open formats Example using xlsx. Tailor this reponse to the format in question. We noticed that the submitted data files are in xlsx format. Please convert your files to a plain text/csv (or other open format); this helps ensure your data are usable in the long-term. Zip files Except for very specific file types, we do not recommend that data are archived in zip format. Data that are zipped together can present a barrier to reuse since it is difficult to accurately document each file within the zip file in a machine readable way. File contents and relationships among files are clear Could you provide a short description of the files submitted? Information about how each file was generated (what software, source files, etc.) will help us create more robust metadata for long term use. Data layout Would you be able to clarify how the data in your files is laid out? Specifically, what do the rows and columns represent? We try not to prescribe a way the researchers must format their data as long as reasonable. However, in extreme cases (for example Excel spreadsheets with data and charts all in one sheet) we will want to kindly ask them to reformat. We would like to suggest a couple of modifications to the structure of your data. This will others to re-use it most effectively. [DESCRIBE WHAT MAY NEED TO BE CHANGED IN THE DATA SET]. Our data submission guidelines page (https://arcticdata.io/submit/) outlines what are best practices for data submissions to the Arctic Data Center. Let us know if you have any questions or if we can be of any help. 9.5.2.7 Attributes Identify which attributes need additional information. If they are common attributes like date and time we do not need further clarification. Checklist for the datateam in reviewing attributes (NetCDF, CSV, shapefiles, or any other tabular datasets): A name (often the column or row header in the file). A complete definition. Any missing value codes along with explanations for those codes. For all numeric data, unit information is needed. For all date-time data, a date-time format is needed (e.g. “DD-MM-YYYY”). For text data, full descriptions for all patterns or code/definition pairs are needed if the text is constrained to a list of patterns or codes. Helpful templates: &gt; We would like your help in defining some of the attributes. Could you write a short description or units for the attributes listed? [Provide a the attribute names in list form] &gt; Could you describe ____? &gt; Please define “XYZ”, including the unit of measure. &gt; What are the units of measurement for the columns labeled “ABC” and “XYZ”? Missing value codes What do the missing values in your measurements represent? A short description of the reason why the values are missing (instrument failure, site not found, etc.) will suffice. We noticed that the data files contain [blank cells - replace with missing values found]. What do these represent? 9.5.2.8 Funding All NSF funded datasets need a funding number. Non-NSF funded datasets might not have funding numbers, depending on the funding organization. We noticed that your dataset does not appear to contain a funding number. The field accepts NSF funding numbers as well as other numbers by different organizations. 9.5.2.9 Methods We noticed that methods were missing from the submission. Submissions should: provide instrument names (if applicable) specify how sampling locations were chosen provide citations for sampling methods that are not explained in detail any software used to process the data Note - this includes software submissions as well (see https://arcticdata.io/submit/#metadata-guidelines-for-software) Your methods section appears to be missing some information. [ADJUST THIS DEPENDING ON WHAT IS MISSING - Users should be able to understand how the data were collected, how to interpret the values, and potentially how to use the data in the case of specialized files.] Comprehensive methods information should be included directly in the metadata record. Pointers or URLs to other sites are unstable. 9.5.3 Final email templates 9.5.3.1 Asking for approval Hi [submitter], I have updated your data package and you can view it here after logging in: [URL] Please review and approve it for publishing or let us know if you would like anything else changed. For your convenience, if we do not hear from you within a week we will proceed with publishing with a DOI. After publishing with a DOI, any further changes to the dataset will result in a new DOI. However, any previous DOIs will still resolve and point the user to the newest version. If you would like to maintain the same DOI please let us know. Please let us know if you have any questions. 9.5.3.2 DOI and data package finalization comments Replying to questions about DOIs We attribute DOIs to data packages as one might give a DOI to a citable publication. Thus, a DOI is permanently associated with a unique and immutable version of a data package. If the data package changes, a new DOI will be created and the old DOI will be preserved with the original version. DOIs and URLs for previous versions of data packages remain active on the Arctic Data Center (will continue to resolve to the data package landing page for the specific version they are associated with), but a clear message will appear at the top of the page stating that “A newer version of this dataset exists” with a hyperlink to that latest version. With this approach, any past uses of a DOI (such as in a publication) will remain functional and will reference the specific version of the data package that was cited, while pointing users to the newest version if one exists. Clarification of updating with a DOI and version control We definitely support updating a data package that has already been assigned a DOI, but when we do so we mark it as a new revision that replaces the original and give it its own DOI. We do that so that any citations of the original version of the data package remain valid (i.e.: after the update, people still know exactly which data were used in the work citing it). Sending finalized URL before resolving ticket [NOTE: the URL format is very specific here, please try to follow it exactly (but substitute in the actual DOI of interest)] Here is the link to your finalized data package: https://doi.org/10.18739/A20X0X If in the future there is a publication associated with this dataset, we would appreciate it if you could register the DOI of your published paper with us by using the Citations button right below the title at the dataset landing page. We are working to build our catalog of dataset citations in the Arctic Data Center. Please let us know if you need any further assistance. New Submission: Abstract, methods, excel to csv, and attributes Thank you for your submission to the Arctic Data Center. From my preliminary examination of your dataset a few fields need to be updated before we can assign a DOI. Your abstract appears to be missing some information. We suggest that the abstract be sufficiently descriptive for a general scientific audience. It should provide an overview of the scientific context/ project/ hypotheses, how this data package fits into the larger project, a synopsis of the experimental or sampling design, and a summary of the data contents. If you prefer and it is appropriate, we could add language from the abstract in the NSF Award found here: [INSERT URL] Your methods section appears to be missing some information. Enough detail should be included so that a reasonable scientist can interpret the study and data for reuse without consulting you nor any other resources. This should hold true today, or even decades from now. Users should be able to understand how the data were collected, how to interpret the values, and potentially how to use the data in the case of specialized files. Please edit the data package to provide a more robust methods section. Comprehensive methods information should be included directly in the metadata record. Pointers or URLs to other sites are unstable and insufficient. Your submitted data files are in excel format. Please convert your files to a plain text/csv or another open (non-proprietary) format in order to facilitate an accurate transfer of information to users and to ensure preservation of the data in perpetuity. We can keep your excel files in the dataset, however we recommend at least one version of each file be stored in an open format. Please add attribute (column) metadata for your data files. If any files share the same attributes you only need to enter them once and we will replicate them to the files. You can add this by navigating to your dataset [INSERT URL], clicking the green “Edit” button, clicking the “Describe” button located to the right of each of your files at the top of the submission page, and in the window that pops up click over to the “Attributes” tab. 9.5.4 Additional email templates 9.5.4.1 Deadlines If the PI is checking about dates/timing: &gt; [give rough estimate of time it might take] &gt; Are you facing any deadlines? If so, we may be able to expedite publication of your submission. 9.5.4.2 Pre-assigned DOI If the PI needs a DOI right away: We can provide you with a pre-assigned DOI that you can reference in your paper, as long as your submission is not facing a deadline from NSF for your final report. However, please note that it will not become active until after we have finished processing your submission and the package is published. Once you have your dataset published, we would appreciate it if you could register the DOI of your published paper with us by using the citations button beside the orange lock icon. We are working to build our catalog of dataset citations in the Arctic Data Center. 9.5.4.3 Asking for dataset access As a security measure we ask that we get the approval from the original submitter of the dataset prior to granting edit permissions to all datasets. 9.5.4.4 Replacing data files The data files can be replaced by going to the green Edit button &gt; Click the black triangle by the Describe button for the data file &gt; Select Replace (attached is also a screenshot on how to get there). 9.5.4.5 Recovering Dataset submissions To recover dataset submissions that were not successful please do the following: Go to https://arcticdata.io/catalog/drafts Find your dataset and download the corresponding file Send us the file in an email 9.5.4.6 Custom Search Link You could also use a permalink like this to direct users to the datasets: https://arcticdata.io/catalog/data/query=&quot;your search query here&quot; for example: https://arcticdata.io/catalog/data/query=Beaufort%20Lagoon%20Ecosystems%20LTER 9.5.4.7 Adding metadata via R KNB does not support direct uploading of EML metadata files through the website (we have a webform that creates metadata), but you can upload your data and metadata through R. Here are some training materials we have that use both the EML and datapack packages. It explains how to set your authentication token, build a package from metadata and data files, and publish the package to one of our test sites. I definitely recommend practicing on a test site prior to publishing to the production site your first time through. You can point to the KNB test node (dev.nceas.ucsb.edu) using this command: d1c &lt;- D1Client(&quot;STAGING2&quot;, &quot;urn:node:mnTestKNB&quot;) If you prefer, there are Java, Python, MATLAB, and Bash/cURL clients as well. 9.5.4.8 Finding multiple data packages If linking to multiple data packages, you can send a link to the profile associated with the submitter’s ORCID iD and it will display all their data packages. e.g.: https://arcticdata.io/catalog/profile/http://orcid.org/0000-0002-2604-4533 9.5.4.9 NSF ARC data submission policy Please find an overview of our submission guidelines here: https://arcticdata.io/submit/, and NSF Office of Polar Programs policy information here: https://www.nsf.gov/pubs/2016/nsf16055/nsf16055.jsp. Investigators should upload their data to the Arctic Data Center (https://arcticdata.io), or, where appropriate, to another community endorsed data archive that ensures the longevity, interpretation, public accessibility, and preservation of the data (e.g., GenBank, NCEI). Local and university web pages generally are not sufficient as an archive. Data preservation should be part of the institutional mission and data must remain accessible even if funding for the archive wanes (i.e., succession plans are in place). We would be happy to discuss the suitability of various archival locations with you further. In order to provide a central location for discovery of ARC-funded data, a metadata record must always be uploaded to the Arctic Data Center even when another community archive is used. 9.5.4.10 Linking ORCiD and LDAP accounts First create an account at orcid.org/register if you have not already. After that account registration is complete, login to the KNB with your ORCID iD here: https://knb.ecoinformatics.org/#share. Next, hover over the icon on the top right and choose “My Profile”. Then, click the “Settings” tab and scroll down to “Add Another Account”. Enter your name or username from your Morpho account and select yourself (your name should populate as an option). Click the “+”. You will then need to log out of knb.ecoinformatics.org and then log back in with your old LDAP account (click “have an existing account”, and enter your Morpho credentials with the organization set to “unaffiliated”) to finalize the linkage between the two accounts. Navigate to “My Profile” and “Settings” to confirm the linkage. After completing this, all of your previously submitted data pacakges should show up on your KNB “My Profile” page, whether you are logged in using your ORCiD or Morpho account, and you will be able to submit data either using Morpho or our web interface. Or, try reversing my instructions - log in first using your Morpho account (by clicking the “existing account” button and selecting organization “unaffiliated”), look for your ORCiD account, then log out and back in with ORCiD to confirm the linkage. Once the dataset is approved by the PI and there are no further changes, publish the dataset with a doi. update &lt;- publish_update(adc, metadata_pid = pkg$metadata, data_pids = pkg$data, resource_map_pid = pkg$resource_map, metadata_path = eml_path, public = T, use_doi = T) 9.6 Categorize datasets As a final step we will categorize the dataset you processed. We are trying to categorize datasets so we can have a rough idea of what kinds of datasets we have at the Arctic Data Center. We will grant you access to the google sheet that has all of the categorized datasets We will categorize each dataset into one of the predefined themes (ie. biology, ecology etc.). Definition of the themes can be found in the google sheet Run the following line with your doi and themes as a list. datamgmt::categorize_dataset(&quot;your_doi&quot;, c(&quot;list&quot;, &quot;of&quot;, &quot;themes&quot;), &quot;your name&quot;) 9.7 Congrats! Congratulations on finishing your first ticket! You can head over to the the repository, data-processing to get your ticket processing code reviewed by the team so we can learn from each other! "]]
